MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;; filename: Renard Plus All in one firmware.asm
                      00002 ;; Orignal filename:    ren16_g2-2009731.asm
                      00003 ;; Copyright (c) 2006,2007,2009 Phil Short
                      00004 ;;
                      00005 ;;  This program is provided free for you to use in any way that you wish,
                      00006 ;;  subject to the laws and regulations where you are using it.  Due diligence
                      00007 ;;  is strongly suggested before using this code.
                      00008 ;;
                      00009 ;;  The Author makes no warranty of any kind, express or implied, with regard
                      00010 ;;  to this program or the documentation contained in this document.  The
                      00011 ;;  Author shall not be liable in any event for incidental or consequential
                      00012 ;;  damages in connection with, or arising out of, the furnishing, performance
                      00013 ;;  or use of these programs.
                      00014 ;;
                      00015 ;;  --------------------------------------------------------------------------
                      00016 ;;
                      00017 ;;  Note: there are some parameters that may be modified by the user.  These
                      00018 ;;    are located just below the list of processors that the firmware is
                      00019 ;;    intended to work with.
                      00020 ;;
                      00021 ;;  4 Jan 2009 PJS Taken as basis for 16-channel version coded up for the
                      00022 ;;     PIC16F722 microcntroller.
                      00023 ;;  11 Jan 2009 PJS Fixed bug so that it now recovers from frame error, added
                      00024 ;;     code for using 16-bit baudrate generator of PIC18 family, added code to
                      00025 ;;     to make the ZC LED to follow the ZC hardware input when that bit is not
                      00026 ;;     toggling (i.e. LED is on when input is open, LED is off when input is
                      00027 ;;     shorted to ground, flashes otherwise with a 5 second (approx) period.
                      00028 ;;  12 Jan 2009 PR Modified scheme for adjusting settings for different CPUs
                      00029 ;;  12 Jan 2009 PJS Fixed settings for PIC18F2221
                      00030 ;;  13 Jan 2009 PJS Removed portions of revision history that related to the
                      00031 ;;     old Renard firmware (PIC16F688-specific).  Added lots of macros to make
                      00032 ;;     it a little easier to re-map the outputs.  These macros will probably
                      00033 ;;     be removed from this file and placed in a separate include file so that
                      00034 ;;     the user doesn't have to re-enter them when a firmware update is issued.
                      00035 ;;  15 Jan 2009 PJS Moved LED from bit 7 of porta to bit 6 of port b, and
                      00036 ;;     tri-stated the former bit.
                      00037 ;;  17 Jan 2009 PJS Fixed problem causing channel 5 to ignore input settings
                      00038 ;;      (and to appear to cyclically dim), and fixed configuration error for
                      00039 ;;      16F722.
                      00040 ;;  28 April 2009 PJS Modified for pinout used on home-etch/SMD  board.  The
                      00041 ;;      VCAP  pin was moved, the LED logic was modified to use only three pins
                      00042 ;;      for four LEDs ('charlie-plexed'), and the triac output pins were moved
                      00043 ;;      around.  Lots  of little modifications to try and make things faster
                      00044 ;;      to compensate for extra charlie-plexing logic in the ISR.
                      00045 ;;  16 May 2009 PJS Split off the local customization file
                      00046 ;;  20 May 2009 PJS Made some fixes for PIC18F family (suggested by pr).
                      00047 ;;  27 May 2010 PJS Fixes for PIC18F family -
                      00048 ;;     - moved code for clearing PIE1, PIE2, and IPEN (previous location of
                      00049 ;;       that code prevented timer2 interrupts from occurring).
                      00050 ;;     - changed a few instances of '0x80' to BANK1 (previous code would access
                      00051 ;;       the wrong addresses).  NOTE that changes to ren16_g2_local.inc is also
                      00052 ;;       required, for the same reason).
                      00053 ;;  28 may 2010 PR Minor changes to the processor config sections. Added 2620 as
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;;       per Mac's (Phoenix) recommendations.
                      00055 ;;  10 Aug 2010 Mac (Phoenix) added PSP Mode for PortE cofig errors.
                      00056 ;;  01 Oct 2010 Mac (Phoenix) changed Clockrate for PIC18F45K22 Device for 64Mhz 
                      00057 ;;      and  Heartbeat location moved, prior to that change back in August 2010
                      00058 ;;      PSP Mode added for PortE cofig errors.;;
                      00059 ;;  06 March 2011 Mac (Phoenix) changed Clockrate to 32Mhz due to poor dimming issues, needed to
                      00060 ;;       remove three status LEDs in order to accommodate 32 channels, there is now only
                      00061 ;;       one status LED that blinks at three different levels of intensities at about every 
                      00062 ;;       three seconds.
                      00063 ;;  22 April 2011 PJS added Start Address code for Ren-W wirelees capabilities
                      00064 ;;  25 April 2011 Mac (Phoenix) added Defines to avoid two sets of code 
                      00065 ;;         for Start Address and non Start Address firmware
                      00066 ;;  05 August 2012 A. Williams (LabRat) added DMX code
                      00067 ;;  10 Oct 2013 A. Williams (LabRat) corrected DMX lag issue
                      00068 ;;  19 Dec 2013 Mac (Phoenix) combined .inc file with .asm files
                      00069 ;;  16 April 2015 Charles Kerr added DMX Lights out function when data signal is lost 
                      00070 ;;     between Controller and sequenced data stream.
                      00071 ;;  22 April 2015 Mac (Phoenix) fixed intermittant loss of dimming control.
                      00072 ;;  10 August 2016 Mac (Phoenix) Merged Renard, Renard Start Addressing, DMX and
                      00073 ;;     added PIC18F4xk22 PIC onto a single .asm file.
                      00074 ;;
                      00075 ;;  ******* dedicated port assignments ********
                      00076 ;;
                      00077 ;;  PIN 1  (RE0) - zero-crossing (input only)
                      00078 ;;  PIN 17 (RC6/TX) - uart_out (output)
                      00079 ;;  PIN 18 (RC7/RX) - uart_in (input)
                      00080 
                      00081 ;;  Outputs are good to drive 15 mA opto-isolators, except this will probably
                      00082 ;;  overload the VSS/VDD pins on the PIC.  So the current through each output
                      00083 ;;  should be limited to 6 mA (except the LED pins).
                      00084 ;;
                      00085 ;;  This code fits in less than 2K of program space, and takes advantage of
                      00086 ;;  that fact at various places to save a few bytes of code, and so it may
                      00087 ;;  not necessarily work as intended if the code size is increased.
                      00088 ;; 
                      00089 ;;  This code does not make use of automatic baud-rate detection, nor does
                      00090 ;;  it use timer1, the low-power, wake-up, analog comparator or A/D
                      00091 ;;  capabilities of the chip.
                      00092 ;;
                      00093 ;;  The interrupt used by this program is timer2, which is intended to create
                      00094 ;;  a periodic (32 us) clock.  Since the timer is reset inside of the ISR, the
                      00095 ;;  foreground routine should disable interrupts for as short a time as
                      00096 ;;  possible (or not at all, if this can be accomplished).
                      00097 
                      00098  LIST R=DEC
                      00099  
                      00100 ;;
                      00101 ;; {pr}
                      00102 ;; added Define statements for each processor that has been tested
                      00103 ;; The current list is:
                      00104 ;; 16f722   <- best cost
                      00105 ;; 18f2525  <- Most memory for future expansion
                      00106 ;; 18f2420  
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00107 ;;
                      00108 ;; Tested 2012
                      00109 ;; 18f2221  <- Cheapest 18f family. assuming has 16bit uart
                      00110 ;;             Currently has config bit errors as it was a copy of the 2525
                      00111 ;;             settings will check settings once chips arrive
                      00112 
                      00113 ;;  --------------------------------------------------------------------------
                      00114 ;;
                      00115 ;;  You might want to change this line if you need different versions of the
                      00116 ;;    include file for any reason.
                      00117         
                      00118 ;;  This file contains the definitions that the user might reasonably want to
                      00119 ;;  change.  This includes the I/O pin mappings, the baud rate, and some
                      00120 ;;  clock-related items. These files were created by Phil Short, Peter Rogers
                      00121 ;;  and modified several times to accommodate the Renard Plus Controllers 
                      00122 ;;  designed by Mac Macmillan (Phoenix)
                      00123 ;;
                      00124 ;;  2) Processor selection (located as a menu item in the MPLAB IDE).
                      00125 ;;
                      00126 ;;  Hardware mappings
                      00127 ;;  PIN 1  (RE0) - zero-crossing (input only)
                      00128 ;;  PIN 2  (RA0) - triac driver 1 (output)
                      00129 ;;  PIN 3  (RA1) - triac driver 2 (output)
                      00130 ;;  PIN 4  (RA2) - triac driver 3 (output)
                      00131 ;;  PIN 5  (RA3) - triac driver 4 (output)
                      00132 ;;  PIN 6  (RA4) - triac driver 5 (output)
                      00133 ;;  PIN 7  (RA5) - VCAP for PIC16F7xx
                      00134 ;;  PIN 10 (RA6) - spare - future option
                      00135 ;;  PIN 9  (RA7) - spare - future option
                      00136 ;;  PIN 11 (RC0) - spare - future option 
                      00137 ;;  PIN 12 (RC1) - triac driver 6 (output)
                      00138 ;;  PIN 13 (RC2) - triac driver 7 (output)
                      00139 ;;  PIN 14 (RC3) - triac driver 8 (output)
                      00140 ;;  PIN 15 (RC4) - triac driver 16 (output)
                      00141 ;;  PIN 16 (RC5) - LED driver (Status)
                      00142 ;;  PIN 17 (RC6/TX) - uart_out (output)
                      00143 ;;  PIN 18 (RC7/RX) - uart_in (input)
                      00144 ;;  PIN 21 (RB0) - triac driver 15 (output)
                      00145 ;;  PIN 22 (RB1) - spare - future option
                      00146 ;;  PIN 23 (RB2) - triac driver 14 (output)
                      00147 ;;  PIN 24 (RB3) - triac driver 13 (output)
                      00148 ;;  PIN 25 (RB4) - triac driver 12 (output)
                      00149 ;;  PIN 26 (RB5) - triac driver 11 (output)
                      00150 ;;  PIN 27 (RB6) - triac driver 10 (output)
                      00151 ;;  PIN 28 (RB7) - triac driver 9 (output)
                      00152 
                      00153 
                      00154 ;;  NOTE:
                      00155 ;;
                      00156 ;;  This firmware is configured for PWM use with up to 460800 baud communications.
                      00157 ;;  Here are the DEFINE statements for changing this.
                      00158 ;;
                      00159 ;;  **********User tunable items*********
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00160 
                      00161 ;;************** DMX MODE ***************
                      00162 ;;#DEFINE DMX  ;; ******uncomment for DMX******
                      00163 #ifdef DMX
                      00164   #DEFINE BAUDRATE 250000
                      00165 
                      00166 ;; Uncomment to hard code the DMX address. Otherwise it will be read
                      00167 ;; from the EEROM locations
                      00168 ;; #DEFINE HARD_CODE_DMX_ADDR  ;;only needed for devices without EEPROM
                      00169 
                      00170   #DEFINE DMX_START_ADDRESS D'001'  ;;change for DMX starting channel in Vixen 1-512
                      00171 ; -- EE Address Mappings --
                      00172   #DEFINE EE_DMX_HIGH           (0x00)  
                      00173   #DEFINE EE_DMX_LOW            (0x01)
                      00174         
                      00175 #else
                      00176 
                      00177 ;; Define Baud Rates. uncomment one of the following Baud Rates
                      00178  #DEFINE BAUDRATE 57600
                      00179 ;; #DEFINE BAUDRATE 115200
                      00180 ;; #DEFINE BAUDRATE 230400
                      00181 
                      00182 
                      00183 
                      00184 ;;************* Renard/Renard Start Address Mode ******************
                      00185 ;; Start address for channel start configuration on controller
                      00186 ;; also required for Ren-W wireless operation,, max baud rate is 57600
                      00187 
                      00188 ;;  #DEFINE START_ADDRESS  ;;******comment this line out for Standard Renard Protocol
                      00189 
                      00190 ;;  #DEFINE START_ADDR 0 ;; 0 starts channels 1-8, see Start Address Chart for
                      00191 ;; Renard Plus or Simple Renards (not the same as SS Renard boards)
                      00192 
                      00193 #endif
                      00194 
                      00195 ;; CTR_LOCKOUT turns all outputs off early if it is > 0.
                      00196 
                      00197  #DEFINE CTR_LOCKOUT 0
                      00198 
                      00199 ;;**************** Internal OSC settings *********************
                      00200 ;;********************* Do Not Change *************************
                      00201 
                      00202  #DEFINE CLOCKRATE 32000000
                      00203 ;; #DEFINE CLOCKRATE 64000000  
                      00204  
                      00205 ;; All PIC18F parts currently require '1<<PLLEN' here.
                      00206 
                      00207  #DEFINE OSC_TUNE_LOCAL 1<<PLLEN ;; {pr} fixed typo
                      00208 
                      00209 ;; #define ZC_TWEAK 15
                      00210 
                      00211 #define DMX_BLINK_RATE 0x2C
                      00212 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00213 
                      00214 ;; I/O bit definitions
                      00215 
                      00216  #define ZC_BIT   3
                      00217  #define ZC_REG   PORTE
                      00218  #define ZC       ZC_REG,(ZC_BIT)
                      00219  #define ZC_MASK  (1<<(ZC_BIT))
                      00220 
                      00221 ;; The rationale for these bit assignments is given in a short section at the
                      00222 ;; end of the main .asm file.
                      00223 ;;
                      00224 ;; valid bits 0,1,3,5
                      00225 ;; extra led's to phil board are 4,7 (7 = switched led)
                      00226 ;;
                      00227         
                      00228  #define HEARTBEAT_LED_BIT  0
                      00229  #define HEARTBEAT_LED_REG  LED_map
                      00230  #define HEARTBEAT_LED  HEARTBEAT_LED_REG, HEARTBEAT_LED_BIT
                      00231 
                      00232  #define ZC_LED_BIT 5
                      00233  #define ZC_LED_REG LED_map
                      00234  #define ZC_LED ZC_LED_REG,ZC_LED_BIT
                      00235         
                      00236  #define FRAME_ERR_LED_BIT  1
                      00237  #define FRAME_ERR_LED_REG  LED_map
                      00238  #define FRAME_ERR_LED  FRAME_ERR_LED_REG, FRAME_ERR_LED_BIT
                      00239         
                      00240  #define RXD_LED_BIT 3
                      00241  #define RXD_LED_REG LED_map
                      00242  #define RXD_LED RXD_LED_REG, RXD_LED_BIT
                      00243 
                      00244 ;; TEST_STROBE is used during the debug phase to create a signal that can be
                      00245 ;;   examined with an oscilloscope.
                      00246 ;; The following pin is currently tristated...so TEST_STROBE is disabled.
                      00247 ;; #define TEST_STROBE PORTA,4
                      00248 
                      00249 ;;  --------------------------------------------------------------------------
                      00250 ;;  Macros for assigning dimmer input channels to IO pins.
                      00251 ;;
                      00252 ;;  The serial communicationss and zero-crossing pins are pre-assigned, and are
                      00253 ;;    not intended to be easily changed.
                      00254 ;;
                      00255 ;;  This is also where output polarity and PWM vs non-PWM status is assigned.
                      00256 ;;  If the SINK_PORTx_CHy bit is set to '1' the signal will be active low, if
                      00257 ;;    it is set '0' the output signal will be active high.  Similarly, if the
                      00258 ;;    PORTx_CHy bit is set to '1' the output will be a PWM signal, if set
                      00259 ;;    to '0' the output will be just a pulse (although this latter option only
                      00260 ;;    makes sense when driving a TRIAC or SCR).
                      00261 
                      00262 ;;  Note: the pins used for LED output must have the SINK bit in the 'OFF'
                      00263 ;;    state and the PWM pin in the 'ON' state.
                      00264 
                      00265 #IFNDEF YES
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00266   #DEFINE YES 1
                      00267 #ENDIF
                      00268 #IFNDEF NO
                      00269   #DEFINE NO 0
                      00270 #ENDIF
                      00271 
                      00272 ;;**************************************************************************
                      00273 ;;***********************INCANDESCENT LIGHT SETTINGS************************
                      00274 ;;**************************************************************************
                      00275 
                      00276 ;;  PortA, bit 0 has channel 1 mapped to it
                      00277   #DEFINE PIN2_CH 1
                      00278   #DEFINE PIN2_SINK YES
                      00279   #DEFINE PIN2_PWM YES
                      00280         
                      00281 ;;  PortA, bit 1 has channel 2 mapped to it
                      00282   #DEFINE PIN3_CH 2
                      00283   #DEFINE PIN3_SINK YES
                      00284   #DEFINE PIN3_PWM YES
                      00285         
                      00286 ;;  PortA, bit 2 has channel 3 mapped to it
                      00287   #DEFINE PIN4_CH 3
                      00288   #DEFINE PIN4_SINK YES
                      00289   #DEFINE PIN4_PWM YES
                      00290         
                      00291 ;;  PortA, bit 3 has channel 4 mapped to it
                      00292   #DEFINE PIN5_CH 4
                      00293   #DEFINE PIN5_SINK YES
                      00294   #DEFINE PIN5_PWM YES
                      00295 
                      00296 ;;  PortA, bit 4 has channel 5 mapped to it
                      00297   #DEFINE PIN6_CH 5
                      00298   #DEFINE PIN6_SINK YES
                      00299   #DEFINE PIN6_PWM YES
                      00300 
                      00301 ;;  PortA, bit 5 is used for VCAP
                      00302   #DEFINE PIN7_SINK NO
                      00303   #DEFINE PIN7_PWM YES
                      00304 
                      00305 ;;  PortA, bit 6 has nothing mapped to it - reserved for possible oscillator
                      00306   #DEFINE PIN10_SINK NO
                      00307   #DEFINE PIN10_PWM YES
                      00308 
                      00309 ;;  PortA, bit 7 has nothing mapped to it - reserved for possible oscillator
                      00310   #DEFINE PIN9_SINK NO
                      00311   #DEFINE PIN9_PWM YES
                      00312 
                      00313 ;; ---------------------------- PORT B mapping -------------------------------
                      00314 
                      00315 ;;  PortB, bit 0 has channel 15 mapped to it
                      00316   #DEFINE PIN21_CH 15
                      00317   #DEFINE PIN21_SINK YES
                      00318   #DEFINE PIN21_PWM YES
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00319 
                      00320 ;;  PortB, bit 1 spare future option
                      00321   #DEFINE PIN22_SINK NO
                      00322   #DEFINE PIN22_PWM YES
                      00323 
                      00324 ;;  PortB, bit 2 has channel 14 mapped to it
                      00325   #DEFINE PIN23_CH 14
                      00326   #DEFINE PIN23_SINK YES
                      00327   #DEFINE PIN23_PWM YES
                      00328 
                      00329 ;;  PortB, bit 3 has channel 13 mapped to it
                      00330   #DEFINE PIN24_CH 13
                      00331   #DEFINE PIN24_SINK YES
                      00332   #DEFINE PIN24_PWM YES
                      00333 
                      00334 ;;  PortB, bit 4 has channel 12 mapped to it
                      00335   #DEFINE PIN25_CH 12
                      00336   #DEFINE PIN25_SINK YES
                      00337   #DEFINE PIN25_PWM YES
                      00338 
                      00339 ;;  PortB, bit 5 has channel 11 mapped to it
                      00340   #DEFINE PIN26_CH 11
                      00341   #DEFINE PIN26_SINK YES
                      00342   #DEFINE PIN26_PWM YES
                      00343 
                      00344 ;;  PortB, bit 6 has channel 10 mapped to it
                      00345   #DEFINE PIN27_CH 10
                      00346   #DEFINE PIN27_SINK YES
                      00347   #DEFINE PIN27_PWM YES
                      00348 
                      00349 ;;  PortB, bit 7 has channel 9 mapped to it
                      00350   #DEFINE PIN28_CH 9
                      00351   #DEFINE PIN28_SINK YES
                      00352   #DEFINE PIN28_PWM YES
                      00353 
                      00354 ;; ---------------------------- PORT C mapping -------------------------------
                      00355 
                      00356 ;;  PortC, bit 0 future option
                      00357   #DEFINE PIN11_SINK NO
                      00358   #DEFINE PIN11_PWM YES
                      00359 
                      00360 ;;  PortC, bit 1 has channel 6 mapped to it
                      00361   #DEFINE PIN12_CH 6
                      00362   #DEFINE PIN12_SINK YES
                      00363   #DEFINE PIN12_PWM YES
                      00364 
                      00365 ;;  PortC, bit 2 has channel 7 mapped to it
                      00366   #DEFINE PIN13_CH 7
                      00367   #DEFINE PIN13_SINK YES
                      00368   #DEFINE PIN13_PWM YES
                      00369 
                      00370 ;;  PortC, bit 3 has channel 8 mapped to it
                      00371   #DEFINE PIN14_CH 8
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00372   #DEFINE PIN14_SINK YES
                      00373   #DEFINE PIN14_PWM YES
                      00374 ;;  #DEFINE LED0_TRIS TRISC^BANK1,3
                      00375 ;;  #DEFINE LED0_anode_sel portc_image,3
                      00376                         
                      00377 ;;  PortC, bit 4 has channel 16 mapped to it
                      00378   #DEFINE PIN15_CH 16
                      00379   #DEFINE PIN15_SINK YES
                      00380   #DEFINE PIN15_PWM YES
                      00381 ;;  #DEFINE LED1_TRIS TRISC^BANK1,4
                      00382 ;;  #DEFINE LED1_anode_sel portc_image,4
                      00383 
                      00384 ;;  PortC, bit 5 has LED driver mapped to it
                      00385   #DEFINE PIN16_SINK NO
                      00386   #DEFINE PIN16_PWM YES
                      00387   #DEFINE LED2_TRIS TRISC^BANK1,5
                      00388   #DEFINE LED2_anode_sel portc_image,5
                      00389 
                      00390 ;;  PortC, bits 6 and 7 are used for serial (UART) I/O
                      00391   #DEFINE PIN17_SINK NO
                      00392   #DEFINE PIN18_SINK NO
                      00393 
                      00394 
                      00395 ;; ----------------------------------------------------------------------------
                      00396 ;; The following definitions probably won't need to be changed by the user.
                      00397 
                      00398   #IFDEF PIN2_CH
                      00399     #DEFINE PIN2_DIMMER (1<<0)
                      00400   #ELSE
                      00401     #DEFINE PIN2_DIMMER 0
                      00402   #ENDIF
                      00403   #IFDEF PIN3_CH
                      00404     #DEFINE PIN3_DIMMER (1<<1)
                      00405   #ELSE
                      00406     #DEFINE PIN3_DIMMER 0
                      00407   #ENDIF
                      00408   #IFDEF PIN4_CH
                      00409     #DEFINE PIN4_DIMMER (1<<2)
                      00410   #ELSE
                      00411     #DEFINE PIN4_DIMMER 0
                      00412   #ENDIF
                      00413   #IFDEF PIN5_CH
                      00414     #DEFINE PIN5_DIMMER (1<<3)
                      00415   #ELSE
                      00416     #DEFINE PIN5_DIMMER 0
                      00417   #ENDIF
                      00418   #IFDEF PIN6_CH
                      00419     #DEFINE PIN6_DIMMER (1<<4)
                      00420   #ELSE
                      00421     #DEFINE PIN6_DIMMER 0
                      00422   #ENDIF
                      00423   #IFDEF PIN7_CH
                      00424     #DEFINE PIN7_DIMMER (1<<5)
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00425   #ELSE
                      00426     #DEFINE PIN7_DIMMER 0
                      00427   #ENDIF
                      00428   #IFDEF PIN10_CH
                      00429     #DEFINE PIN10_DIMMER (1<<6)
                      00430   #ELSE
                      00431     #DEFINE PIN10_DIMMER 0
                      00432   #ENDIF
                      00433   #IFDEF PIN9_CH
                      00434     #DEFINE PIN9_DIMMER (1<<7)
                      00435   #ELSE
                      00436     #DEFINE PIN9_DIMMER 0
                      00437   #ENDIF
                      00438         
                      00439   #IFDEF PIN21_CH
                      00440     #DEFINE PIN21_DIMMER (1<<0)
                      00441   #ELSE
                      00442     #DEFINE PIN21_DIMMER 0
                      00443   #ENDIF
                      00444   #IFDEF PIN22_CH
                      00445     #DEFINE PIN22_DIMMER (1<<1)
                      00446   #ELSE
                      00447     #DEFINE PIN22_DIMMER 0
                      00448   #ENDIF
                      00449   #IFDEF PIN23_CH
                      00450     #DEFINE PIN23_DIMMER (1<<2)
                      00451   #ELSE
                      00452     #DEFINE PIN23_DIMMER 0
                      00453   #ENDIF
                      00454   #IFDEF PIN24_CH
                      00455     #DEFINE PIN24_DIMMER (1<<3)
                      00456   #ELSE
                      00457     #DEFINE PIN24_DIMMER 0
                      00458   #ENDIF
                      00459   #IFDEF PIN25_CH
                      00460     #DEFINE PIN25_DIMMER (1<<4)
                      00461   #ELSE
                      00462     #DEFINE PIN25_DIMMER 0
                      00463   #ENDIF
                      00464   #IFDEF PIN26_CH
                      00465     #DEFINE PIN26_DIMMER (1<<5)
                      00466   #ELSE
                      00467     #DEFINE PIN26_DIMMER 0
                      00468   #ENDIF
                      00469   #IFDEF PIN27_CH
                      00470     #DEFINE PIN27_DIMMER (1<<6)
                      00471   #ELSE
                      00472     #DEFINE PIN27_DIMMER 0
                      00473   #ENDIF
                      00474   #IFDEF PIN28_CH
                      00475     #DEFINE PIN28_DIMMER (1<<7)
                      00476   #ELSE
                      00477     #DEFINE PIN28_DIMMER 0
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00478   #ENDIF        
                      00479 
                      00480   #IFDEF PIN11_CH
                      00481     #DEFINE PIN11_DIMMER (1<<0)
                      00482   #ELSE
                      00483     #DEFINE PIN11_DIMMER 0
                      00484   #ENDIF
                      00485   #IFDEF PIN12_CH
                      00486     #DEFINE PIN12_DIMMER (1<<1)
                      00487   #ELSE
                      00488     #DEFINE PIN12_DIMMER 0
                      00489   #ENDIF
                      00490   #IFDEF PIN13_CH
                      00491     #DEFINE PIN13_DIMMER (1<<2)
                      00492   #ELSE
                      00493     #DEFINE PIN13_DIMMER 0
                      00494   #ENDIF
                      00495   #IFDEF PIN14_CH
                      00496     #DEFINE PIN14_DIMMER (1<<3)
                      00497   #ELSE
                      00498     #DEFINE PIN14_DIMMER 0
                      00499   #ENDIF
                      00500   #IFDEF PIN15_CH
                      00501     #DEFINE PIN15_DIMMER (1<<4)
                      00502   #ELSE
                      00503     #DEFINE PIN15_DIMMER 0
                      00504   #ENDIF
                      00505   #IFDEF PIN16_CH
                      00506     #DEFINE PIN16_DIMMER (1<<5)
                      00507   #ELSE
                      00508     #DEFINE PIN16_DIMMER 0
                      00509   #ENDIF
                      00510   #IFDEF PIN17_CH
                      00511     #DEFINE PIN17_DIMMER (1<<6)
                      00512   #ELSE
                      00513     #DEFINE PIN17_DIMMER 0
                      00514   #ENDIF
                      00515   #IFDEF PIN18_CH
                      00516     #DEFINE PIN18_DIMMER (1<<7)
                      00517   #ELSE
                      00518     #DEFINE PIN18_DIMMER 0
                      00519   #ENDIF
                      00520 
                      00521 ;; ----- Port A
                      00522 
                      00523   #DEFINE DIMMER_BITMAP_PORTA (PIN2_DIMMER | PIN3_DIMMER | PIN4_DIMMER | PIN5_DIMMER | PIN6_DIMMER | PIN
                            7_DIMMER | PIN10_DIMMER | PIN9_DIMMER)
                      00524 
                      00525   #DEFINE SINK_MAP_PORTA (((((((PIN9_SINK * 2 + PIN10_SINK) * 2 + PIN7_SINK) * 2 + PIN6_SINK) * 2 + PIN5
                            _SINK) * 2 + PIN4_SINK) * 2 + PIN3_SINK) * 2 + PIN2_SINK)
                      00526 
                      00527   #DEFINE PWM_MAP_PORTA ((((((((PIN9_PWM*2+PIN10_PWM)*2+PIN7_PWM)*2+PIN6_PWM)*2+PIN5_PWM)*2+PIN4_PWM)*2+
                            PIN3_PWM)*2+PIN2_PWM))
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00528 
                      00529 ;; ----- Port B
                      00530         
                      00531   #DEFINE DIMMER_BITMAP_PORTB (PIN21_DIMMER | PIN22_DIMMER | PIN23_DIMMER | PIN24_DIMMER | PIN25_DIMMER 
                            | PIN26_DIMMER | PIN27_DIMMER | PIN28_DIMMER)
                      00532 
                      00533   #DEFINE SINK_MAP_PORTB (((((((PIN28_SINK * 2 + PIN27_SINK) * 2 + PIN26_SINK) * 2 + PIN25_SINK) * 2 + P
                            IN24_SINK) * 2 + PIN23_SINK) * 2 + PIN22_SINK) * 2 + PIN21_SINK)
                      00534 
                      00535   #DEFINE PWM_MAP_PORTB ((((((((PIN28_PWM*2+PIN27_PWM)*2+PIN26_PWM)*2+PIN25_PWM)*2+PIN24_PWM)*2+PIN23_PW
                            M)*2+PIN22_PWM)*2+PIN21_PWM))
                      00536 
                      00537 ;; ----- Port C
                      00538         
                      00539   #DEFINE DIMMER_BITMAP_PORTC (PIN11_DIMMER | PIN12_DIMMER | PIN13_DIMMER | PIN14_DIMMER | PIN15_DIMMER 
                            | PIN16_DIMMER | PIN17_DIMMER | PIN18_DIMMER)
                      00540 
                      00541   #DEFINE SINK_MAP_PORTC (((((((PIN18_SINK * 2 + PIN17_SINK) * 2 + PIN16_SINK) * 2 + PIN15_SINK) * 2 + P
                            IN14_SINK) * 2 + PIN13_SINK) * 2 + PIN12_SINK) * 2 + PIN11_SINK)
                      00542 
                      00543   #DEFINE PWM_MAP_PORTC (((((((PIN16_PWM)*2+PIN15_PWM)*2+PIN14_PWM)*2+PIN13_PWM)*2+PIN12_PWM)*2+PIN11_PW
                            M))
                      00544         
                      00545 ;; Processor Configuration Directives - specific to each processor.  The actual
                      00546 ;;   processor is selected in the MPLAB IDE Configuration menu item.  The
                      00547 ;;   symbol 'OSC_CONTROL_LOCAL' is defined in ren16_local.inc.
                      00548         
                      00549 
                      00550  #IFDEF __18F25K22
                      00551 
                      00552  INCLUDE "p18f25K22.inc"
                      00553  #DEFINE PIC18_FAMILY
                      00554 
                      00555  #define OSC_CONTROL_LOCAL 0x60
                      00556 ;; #define OSC_CONTROL_LOCAL 0x70
                      00557 
                      00558         CONFIG PRICLKEN=ON, FCMEN=OFF,IESO=OFF,PLLCFG=ON, FOSC=INTIO67
                      00559 ;; wdt off, brownout is on and set for second highest voltage (hardware only)
                      00560         CONFIG PWRTEN=ON, BOREN=NOSLP, BORV=285
                      00561 
                      00562         CONFIG WDTEN=OFF,WDTPS=1
                      00563 ;; mclre disabled, timer1 cfg fow low power, portb pins are digital, ccp2 mux
                      00564         CONFIG MCLRE=INTMCLR,PBADEN=OFF,CCP2MX=PORTC1  ;;,CCP3MX = PORTB5,T3CMX = PORTB5
                      00565 
                      00566 ;; debug, extended_instruction, low-voltage programming and reset_stack_err clr
                      00567         CONFIG DEBUG=OFF,XINST=OFF,LVP=OFF,STVREN=ON,HFOFST = OFF
                      00568 
                      00569 ;; code protect some blocks (program memory and eeprom)
                      00570         CONFIG CP0=OFF,CP1=OFF
                      00571         CONFIG CPB=OFF,CPD=OFF
                      00572 
                      00573 ;; write protect some blocks (program memory and eeprom)
                      00574         CONFIG WRT0=OFF,WRT1=OFF
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00575         CONFIG WRTB=OFF,WRTC=OFF,WRTD=OFF
                      00576 
                      00577 ;; following two words protect the various program code blocks from table reads
                      00578         CONFIG EBTR0=OFF,EBTR1=OFF
                      00579         CONFIG EBTRB=OFF
                      00580 
                      00581  #ENDIF
                      00582 
                      00583 
                      00584  #IFDEF __18F2525
                      00585 
                      00586  INCLUDE "p18f2525.inc"
                      00001        LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F2525 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01296         LIST
                      00587  #DEFINE PIC18_FAMILY
                      00588 
                      00589 ;; #define OSC_CONTROL_LOCAL 0x60
                      00590  #define OSC_CONTROL_LOCAL 0x70
                      00591 
                      00592  #define OSC_CONFIG_LOCAL OSC=INTIO67
                      00593 
                      00594 
                      00595         CONFIG OSC_CONFIG_LOCAL, FCMEN=OFF,IESO=OFF
                      00596 ;; wdt off, brownout is on and set for second highest voltage (hardware only)
                      00597         CONFIG PWRT=ON, BOREN=NOSLP, BORV=1
                      00598 
                      00599         CONFIG WDT=OFF,WDTPS=1
                      00600 ;; mclre disabled, timer1 cfg fow low power, portb pins are digital, ccp2 mux
                      00601         CONFIG MCLRE=OFF,PBADEN=OFF,CCP2MX=PORTC
                      00602 
                      00603 ;; debug, extended_instruction, low-voltage programming and reset_stack_err clr
                      00604         CONFIG DEBUG=OFF,XINST=OFF,LVP=OFF,STVREN=ON
                      00605 
                      00606 ;; code protect some blocks (program memory and eeprom)
                      00607         CONFIG CP0=OFF,CP1=OFF
                      00608         CONFIG CPB=OFF,CPD=OFF
                      00609 
                      00610 ;; write protect some blocks (program memory and eeprom)
                      00611         CONFIG WRT0=OFF,WRT1=OFF
                      00612         CONFIG WRTB=OFF,WRTC=OFF,WRTD=OFF
                      00613 
                      00614 ;; following two words protect the various program code blocks from table reads
                      00615         CONFIG EBTR0=OFF,EBTR1=OFF
                      00616         CONFIG EBTRB=OFF
                      00617 
                      00618  #ENDIF
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00619 
                      00620 
                      00621         
                      00622    #DEFINE BANK1 0
                      00623    #DEFINE BANK2_TWIDDLE 0
                      00624    #DEFINE BANK3_TWIDDLE 0
                      00625    #DEFINE BANK4_TWIDDLE 0
                      00626 
                      00627 ;; registers 0x6 (6) through 0x39 (57)
                      00628   CBLOCK 0x4
                      00629 
  00000004            00630   zc_noedge_counter
                      00631 
  00000005            00632   rx_char
                      00633 
  00000006            00634   zc_delayline
                      00635 
  00000007            00636   ctr_ckt1, ctr_ckt2, ctr_ckt3, ctr_ckt4
  0000000B            00637   ctr_ckt5, ctr_ckt6, ctr_ckt7, ctr_ckt8
  0000000F            00638   ctr_ckt9, ctr_ckt10, ctr_ckt11, ctr_ckt12
  00000013            00639   ctr_ckt13, ctr_ckt14, ctr_ckt15, ctr_ckt16
                      00640 
                      00641 
                      00642 ;; event_flag is used for communicating between the ISR and the foreground code
                      00643 ;;   in the inactive state all of the bits are high.  A bit is cleared in the
                      00644 ;;   ISR to indicate an event and set in the foreground when that event is
                      00645 ;;   processed.
                      00646 ;;   bit 0 is cleared every 256'th interrupt, used for status LED timeouts and
                      00647 ;;      detecting missing zero-crossing transitions.
                      00648 ;;   bit 1 is cleared on the leading edge of the zero-cross signal.
                      00649 
  00000017            00650   event_flag
                      00651 
                      00652 ;; state_flag is used to hold state info used in the ISR.
                      00653 ;;   bit 0 is the value of the ZC signal on the last timer interrupt
                      00654 ;;   bit 1 is set when ZC goes high (i.e. transition), and is cleared when ZC
                      00655 ;;     goes low.  It goes low (or remains low) if there are no low-high
                      00656 ;;     transitions on the ZC signal.
                      00657 
  00000018            00658   state_flag
                      00659 
  00000019            00660   porta_image, portb_image, portc_image
  0000001C            00661   ctr_timeslot
                      00662 
  0000001D            00663   zc_tmr_save
                      00664 
                      00665 ;; Variables related to the 'charlie-plexed' status LEDs:
                      00666         
  0000001E            00667   LED_map
  0000001F            00668   LED_bit_ctr
                      00669         
  00000020            00670   LED_anode_rotator
  00000021            00671   LED_cathode_rotator
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000022            00672   LED_data_rotator
                      00673 
  00000023            00674   _w, _status, LED_TRIS_mask
  00000026            00675   isr_counter
  00000027            00676   heartbeat_countdown
  00000028            00677   frame_err_countdown
  00000029            00678   rxd_countdown
  0000002A            00679   zc_countdown
  0000002B            00680   Timeout
  0000002C            00681   Timecounter
                      00682 
                      00683 
  0000002D            00684   dmxhighbyte:0         ;; DMX
  0000002D            00685   our_addr
  0000002E            00686   dmxlowbyte:0          ;; DMX  
  0000002E            00687   rx_discard_count              ; PJS 4/22/11
  0000002F            00688   skiphigh:0            ;; DMX
  0000002F            00689   rx_copycount                  ; PJS 4/22/11
  00000030            00690   skiplow:0                     ;; DMX
  00000030            00691   rx_flag_extra  ;; bit 0 set if prior character was an ESC.
                      00692 
  00000031            00693   dmxPayloadCount
  00000032            00694   smDmxL
  00000033            00695   smDmxH        ;; 0x3D - only two more variables left
                      00696 
  00000034            00697   dmxStatusCtr
                      00698 
                      00699   ENDC
                      00700 
                      00701 ;; registers 0x40 (64) through 0x5F (95)
                      00702 
                      00703   CBLOCK 0x40
                      00704 
  00000040            00705   slot_id_ckt1, slot_id_ckt2, slot_id_ckt3, slot_id_ckt4
  00000044            00706   slot_id_ckt5, slot_id_ckt6, slot_id_ckt7, slot_id_ckt8        
  00000048            00707   slot_id_ckt9, slot_id_ckt10, slot_id_ckt11, slot_id_ckt12
  0000004C            00708   slot_id_ckt13, slot_id_ckt14, slot_id_ckt15, slot_id_ckt16    
                      00709 
                      00710 
                      00711   ENDC
                      00712 
                      00713 
                      00714 ;; Register(s) that are accessed in both the first and second banks.
                      00715 ;; registers 0x70 (112) through 0x78  (120)
                      00716 
                      00717 
                      00718 
                      00719 
                      00720 
                      00721 ;; assigned numbers:
                      00722 
                      00723  #define DEFAULT_LINERATE 50
                      00724  #define MAX_LINERATE 70
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00725 
                      00726 ;; derived numbers:
                      00727 
                      00728 ;; initializer for baudrate generator (based on formula from datasheet)
                      00729 ;;  ********************Do Not Change********************
                      00730 
                      00731 
                      00732 ;;   #DEFINE BAUD_INIT (CLOCKRATE/BAUDRATE/8 - 1)  ;;64mhz
                      00733    #DEFINE BAUD_INIT (CLOCKRATE/BAUDRATE/4 - 1)  ;;32mhz
                      00734 
                      00735 ;; **************Initializer for cell timer ZC Setup********************
                      00736 
                      00737  #define CELL_RATE ((2*DEFAULT_LINERATE) * 256)
                      00738 
                      00739  #define CELL_TMR_INIT (CLOCKRATE/8/CELL_RATE)  ;;32 mhz
                      00740 ;; #define CELL_TMR_INIT (CLOCKRATE/16/CELL_RATE)  ;;64 mhz
                      00741 ;; Number used for range-checking prospective values for the periodic timer
                      00742 ;;    interval.
                      00743  #define MIN_ZC_TIMER ((CLOCKRATE/4)/MAX_LINERATE/256/2)  ;;32mhz
                      00744 ;; #define MIN_ZC_TIMER ((CLOCKRATE/8)/MAX_LINERATE/256/2)  ;;64mhz
                      00745                 
                      00746 
                      00747 
                      00748 #ifdef DMX
                      00749 ; ----------------- dmxread -------     
                      00750 
                      00751 chgDmxState macro newState               
                      00752                 movlw   LOW(newState)
                      00753                 movwf   smDmxL
                      00754                 movlw   HIGH(newState)
                      00755                 movwf   smDmxH
                      00756    endm
                      00757 
                      00758 gotoDmxState macro
                      00759                 movff   smDmxH, PCLATH
                      00760                 movf    smDmxL,W
                      00761                 movwf   PCL
                      00762         endm
                      00763 
                      00764 #endif
                      00765 ;; ---------------------------------------------------------------------------
                      00766 
                      00767 
                      00768  org 0
000000 0000           00769         nop
000002 EF?? F???      00770         goto initialize
                      00771 
                      00772 
                      00773     ORG 8
                      00774 
                      00775         
                      00776 ;; interrupt routine
                      00777 ;; Just the timer interrupt for now...
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00778 ;; ISR timing.
                      00779 ;;   isr_regular path:  
                      00780 ;;     18 - start of ISR through isr_regular
                      00781 ;;     55 - do_regular through isr_status_LEDs
                      00782 ;;     26 - longest path from isr_status_LEDs to/including the return
                      00783 ;;     99 - total
                      00784 ;;
                      00785 ;;   isr_load_counters path:
                      00786 ;;     22 - start of ISR through isr_load_counters (including ZC lead edge)
                      00787 ;;     36 - isr_load_counters through isr_status_LEDs
                      00788 ;;     41 - longest path from isr_status_LEDs to/including the return
                      00789 ;;     99 - total
                      00790 ;;
                      00791 ;; Requirement for the maximum length of this ISR
                      00792 ;;  These timer interrupts occur once overy 30 uS (120 instructions at 16 MHz).
                      00793 ;;  At 57600 baud there is a character available every 190 uS or so, or once
                      00794 ;;    every 6-1/3 timer interrupts.  It takes about 40 instructions to process
                      00795 ;;    one of these characters, or about 7 instructions per timer interrupt.
                      00796 ;;  So this ISR must be kept under 113 (120 - 7) instructions.
                      00797 ;;
                      00798 ;;  This analysis doesn't account for event handling (which probably doesn't
                      00799 ;;    matter, since uart handling have precedence over event-handling).
                      00800 ;;
000008                00801 Int
                      00802 
                      00803 
000008 929E           00804         bcf     PIR1,TMR2IF     ; reset the interrupt
                      00805                         
00000A 2A26           00806         incf    isr_counter,f   ; update count of interrupts ... used only for
00000C B4D8           00807         btfsc   STATUS,Z        ; LED blinking and charlie-plex state variable
00000E 9017           00808         bcf     event_flag,0    ; create event once every 256'th interrupt
                      00809 
000010 A684           00810         btfss   ZC
000012 6A18           00811         clrf    state_flag
                      00812 
000014 B684           00813         btfsc   ZC              ; ZC set this time? (if not, not leading edge)
000016 B018           00814         btfsc   state_flag,0    ; ZC set last time? (if yes, not leading edge)
000018 EF?? F???      00815         goto    isr_not_zc_lead_edge
                      00816 
                      00817 ;; ZC leading edge
                      00818 
00001C 9217           00819         bcf     event_flag,1    ; ZC leading edge flag for foreground code
00001E 8218           00820         bsf     state_flag,1    ; ZC leading edge for ISR code.
000020 8018           00821         bsf     state_flag,0
                      00822         
000022 50D6           00823         movf    TMR0L,w
000024 6E1D           00824         movwf   zc_tmr_save
                      00825 
000026                00826 isr_not_zc_lead_edge:
                      00827 
000026 3E1C           00828         incfsz  ctr_timeslot,f
000028 B218           00829         btfsc   state_flag,1
00002A EF?? F???      00830         goto    isr_load_counters
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00831 ;;
                      00832 ;; Handle the normal case (selectively turn on dimmer outputs).  This code is
                      00833 ;;   bypassed if ctr_timeslot = 0 OR if state_flag.1 is set.
                      00834 ;;
00002E                00835 isr_regular:
                      00836 
00002E 0EE0           00837         movlw   255 & ~(DIMMER_BITMAP_PORTA)
                      00838     #IFDEF PIN2_CH
000030 3E07           00839         incfsz  ctr_ckt1,f
000032 0901           00840         iorlw   1       ; turn off this SSR
                      00841     #ENDIF
                      00842     #IFDEF PIN3_CH
000034 3E08           00843         incfsz  ctr_ckt2,f
000036 0902           00844         iorlw   2       ; turn off this SSR
                      00845     #ENDIF
                      00846     #IFDEF PIN4_CH
000038 3E09           00847         incfsz  ctr_ckt3,f
00003A 0904           00848         iorlw   4       ; turn off this SSR
                      00849     #ENDIF
                      00850     #IFDEF PIN5_CH
00003C 3E0A           00851         incfsz  ctr_ckt4,f
00003E 0908           00852         iorlw   8       ; turn off this SSR
                      00853     #ENDIF
                      00854     #IFDEF PIN6_CH
000040 3E0B           00855         incfsz  ctr_ckt5,f
000042 0910           00856         iorlw   16      ; turn off this SSR
                      00857     #ENDIF
                      00858     #IFDEF PIN7_CH
                      00859         incfsz  ctr_ckt0,f
                      00860         iorlw   32      ; turn off this SSR
                      00861     #ENDIF
                      00862     #IFDEF PIN10_CH
                      00863         incfsz  ctr_ckt0,f
                      00864         iorlw   64      ; turn off this SSR
                      00865     #ENDIF
                      00866     #IFDEF PIN9_CH
                      00867         incfsz  ctr_ckt0,f
                      00868         iorlw   128     ; turn off this SSR
                      00869     #ENDIF
000044 1619           00870         andwf   porta_image,f
                      00871         
000046 0E02           00872         movlw   255 & ~(DIMMER_BITMAP_PORTB)
                      00873     #IFDEF PIN21_CH
000048 3E15           00874         incfsz  ctr_ckt15,f
00004A 0901           00875         iorlw   1       ; turn off this SSR
                      00876     #ENDIF
                      00877     #IFDEF PIN22_CH
                      00878         incfsz  ctr_ckt0,f
                      00879         iorlw   2       ; turn off this SSR
                      00880     #ENDIF
                      00881     #IFDEF PIN23_CH
00004C 3E14           00882         incfsz  ctr_ckt14,f
00004E 0904           00883         iorlw   4       ; turn off this SSR
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00884     #ENDIF
                      00885     #IFDEF PIN24_CH
000050 3E13           00886         incfsz  ctr_ckt13,f
000052 0908           00887         iorlw   8       ; turn off this SSR
                      00888     #ENDIF
                      00889     #IFDEF PIN25_CH
000054 3E12           00890         incfsz  ctr_ckt12,f
000056 0910           00891         iorlw   16      ; turn off this SSR
                      00892     #ENDIF
                      00893     #IFDEF PIN26_CH
000058 3E11           00894         incfsz  ctr_ckt11,f
00005A 0920           00895         iorlw   32      ; turn off this SSR
                      00896     #ENDIF
                      00897     #IFDEF PIN27_CH
00005C 3E10           00898         incfsz  ctr_ckt10,f
00005E 0940           00899         iorlw   64      ; turn off this SSR
                      00900     #ENDIF
                      00901     #IFDEF PIN28_CH
000060 3E0F           00902         incfsz  ctr_ckt9,f
000062 0980           00903         iorlw   128     ; turn off this SSR
                      00904     #ENDIF
000064 161A           00905         andwf   portb_image,f
                      00906         
000066 0EE1           00907         movlw   255 & ~(DIMMER_BITMAP_PORTC)
                      00908     #IFDEF PIN11_CH
                      00909         incfsz  ctr_ckt0,f
                      00910         iorlw   1       ; turn off this SSR
                      00911     #ENDIF
                      00912     #IFDEF PIN12_CH
000068 3E0C           00913         incfsz  ctr_ckt6,f
00006A 0902           00914         iorlw   2       ; turn off this SSR
                      00915     #ENDIF
                      00916     #IFDEF PIN13_CH
00006C 3E0D           00917         incfsz  ctr_ckt7,f
00006E 0904           00918         iorlw   4       ; turn off this SSR
                      00919     #ENDIF
                      00920     #IFDEF PIN14_CH
000070 3E0E           00921         incfsz  ctr_ckt8,f
000072 0908           00922         iorlw   8       ; turn off this SSR
                      00923     #ENDIF
                      00924     #IFDEF PIN15_CH
000074 3E16           00925         incfsz  ctr_ckt16,f
000076 0910           00926         iorlw   16      ; turn off this SSR
                      00927     #ENDIF
                      00928     #IFDEF PIN16_CH
                      00929         incfsz  ctr_ckt0,f
                      00930         iorlw   32      ; turn off this SSR
                      00931     #ENDIF
                      00932     #IFDEF PIN17_CH
                      00933         incfsz  ctr_ckt0,f
                      00934         iorlw   64      ; turn off this SSR
                      00935     #ENDIF
                      00936     #IFDEF PIN18_CH
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00937         incfsz  ctr_ckt0,f
                      00938         iorlw   128     ; turn off this SSR
                      00939     #ENDIF
000078 161B           00940         andwf   portc_image,f
                      00941 
00007A 5019           00942         movf    porta_image,w
00007C 0A00           00943         xorlw   (DIMMER_BITMAP_PORTA & ~SINK_MAP_PORTA)
00007E 6E80           00944         movwf   PORTA
000080 0E00           00945         movlw   LOW (~PWM_MAP_PORTA)
000082 1219           00946         iorwf   porta_image,f   
                      00947                 
000084 501A           00948         movf    portb_image,w
000086 0A00           00949         xorlw   (DIMMER_BITMAP_PORTB & ~SINK_MAP_PORTB)
000088 6E81           00950         movwf   PORTB
00008A 0E00           00951         movlw   LOW (~PWM_MAP_PORTB)
00008C 121A           00952         iorwf   portb_image,f
                      00953 
00008E 501B           00954         movf    portc_image,w
000090 0A00           00955         xorlw   (DIMMER_BITMAP_PORTC & ~SINK_MAP_PORTC)
000092 6E82           00956         movwf   PORTC
000094 0EC0           00957         movlw   ~PWM_MAP_PORTC
000096 121B           00958         iorwf   portc_image,f
000098 EF?? F???      00959         goto    isr_status_LEDs
                      00960 
                      00961 ;;
                      00962 ;; Initialize the ctr_ckt registers for upcoming half-cycle.  Copy the slot_id
                      00963 ;;   registers to the ctr registers, set output port values according to
                      00964 ;;   whether the dimmer values are 255 or not.
                      00965 ;;
00009C                00966 isr_load_counters:
00009C 0E00           00967         movlw   CTR_LOCKOUT
00009E 6E1C           00968         movwf   ctr_timeslot
                      00969 
0000A0 B018           00970         btfsc   state_flag,0
0000A2 6AD6           00971         clrf    TMR0L
                      00972 
                      00973     #IFDEF PIN2_CH
0000A4 5040           00974         movf    slot_id_ckt1,w
0000A6 6E07           00975         movwf   ctr_ckt1
                      00976     #ENDIF
                      00977 
                      00978     #IFDEF PIN3_CH
0000A8 5041           00979         movf    slot_id_ckt2,w
0000AA 6E08           00980         movwf   ctr_ckt2
                      00981     #ENDIF
                      00982                 
                      00983     #IFDEF PIN4_CH
0000AC 5042           00984         movf    slot_id_ckt3,w
0000AE 6E09           00985         movwf   ctr_ckt3
                      00986     #ENDIF
                      00987                 
                      00988     #IFDEF PIN5_CH
0000B0 5043           00989         movf    slot_id_ckt4,w
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000B2 6E0A           00990         movwf   ctr_ckt4
                      00991     #ENDIF
                      00992                 
                      00993     #IFDEF PIN6_CH
0000B4 5044           00994         movf    slot_id_ckt5,w
0000B6 6E0B           00995         movwf   ctr_ckt5
                      00996     #ENDIF
                      00997                 
                      00998     #IFDEF PIN7_CH
                      00999         movf    slot_id_ckt0,w
                      01000         movwf   ctr_ckt0
                      01001     #ENDIF
                      01002 
                      01003     #IFDEF PIN10_CH
                      01004         movf    slot_id_ckt0,w
                      01005         movwf   ctr_ckt0
                      01006     #ENDIF
                      01007         
                      01008     #IFDEF PIN9_CH
                      01009         movf    slot_id_ckt0,w
                      01010         movwf   ctr_ckt0
                      01011     #ENDIF
                      01012 
                      01013     #IFDEF PIN21_CH
0000B8 504E           01014         movf    slot_id_ckt15,w
0000BA 6E15           01015         movwf   ctr_ckt15
                      01016     #ENDIF
                      01017 
                      01018     #IFDEF PIN22_CH
                      01019         movf    slot_id_ckt0,w
                      01020         movwf   ctr_ckt0
                      01021     #ENDIF
                      01022                 
                      01023     #IFDEF PIN23_CH
0000BC 504D           01024         movf    slot_id_ckt14,w
0000BE 6E14           01025         movwf   ctr_ckt14
                      01026     #ENDIF
                      01027                 
                      01028     #IFDEF PIN24_CH
0000C0 504C           01029         movf    slot_id_ckt13,w
0000C2 6E13           01030         movwf   ctr_ckt13
                      01031     #ENDIF
                      01032                 
                      01033     #IFDEF PIN25_CH
0000C4 504B           01034         movf    slot_id_ckt12,w
0000C6 6E12           01035         movwf   ctr_ckt12
                      01036     #ENDIF
                      01037                 
                      01038     #IFDEF PIN26_CH
0000C8 504A           01039         movf    slot_id_ckt11,w
0000CA 6E11           01040         movwf   ctr_ckt11
                      01041     #ENDIF
                      01042 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01043     #IFDEF PIN27_CH
0000CC 5049           01044         movf    slot_id_ckt10,w
0000CE 6E10           01045         movwf   ctr_ckt10
                      01046     #ENDIF
                      01047         
                      01048     #IFDEF PIN28_CH
0000D0 5048           01049         movf    slot_id_ckt9,w
0000D2 6E0F           01050         movwf   ctr_ckt9
                      01051     #ENDIF
                      01052 
                      01053     #IFDEF PIN11_CH
                      01054         movf    slot_id_ckt0,w
                      01055         movwf   ctr_ckt0
                      01056     #ENDIF
                      01057 
                      01058     #IFDEF PIN12_CH
0000D4 5045           01059         movf    slot_id_ckt6,w
0000D6 6E0C           01060         movwf   ctr_ckt6
                      01061     #ENDIF
                      01062                 
                      01063     #IFDEF PIN13_CH
0000D8 5046           01064         movf    slot_id_ckt7,w
0000DA 6E0D           01065         movwf   ctr_ckt7
                      01066     #ENDIF
                      01067                 
                      01068     #IFDEF PIN14_CH
0000DC 5047           01069         movf    slot_id_ckt8,w
0000DE 6E0E           01070         movwf   ctr_ckt8
                      01071     #ENDIF
                      01072                 
                      01073     #IFDEF PIN15_CH
0000E0 504F           01074         movf    slot_id_ckt16,w
0000E2 6E16           01075         movwf   ctr_ckt16
                      01076     #ENDIF
                      01077                 
                      01078     #IFDEF PIN16_CH
                      01079         movf    slot_id_ckt0,w
                      01080         movwf   ctr_ckt0
                      01081     #ENDIF
                      01082 
                      01083     #IFDEF PIN17_CH
                      01084         movf    slot_id_ckt0,w
                      01085         movwf   ctr_ckt0
                      01086     #ENDIF
                      01087         
                      01088     #IFDEF PIN18_CH
                      01089         movf    slot_id_ckt0,w
                      01090         movwf   ctr_ckt0
                      01091     #ENDIF
                      01092 
0000E4 0E1F           01093         movlw   DIMMER_BITMAP_PORTA
0000E6 1219           01094         iorwf   porta_image,f
0000E8 5019           01095         movf    porta_image,w
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000EA 0A00           01096         xorlw   (DIMMER_BITMAP_PORTA & ~SINK_MAP_PORTA)
0000EC 6E80           01097         movwf   PORTA
                      01098                 
0000EE 0EFD           01099         movlw   DIMMER_BITMAP_PORTB
0000F0 121A           01100         iorwf   portb_image,f
0000F2 501A           01101         movf    portb_image,w
0000F4 0A00           01102         xorlw   (DIMMER_BITMAP_PORTB & ~SINK_MAP_PORTB)
0000F6 6E81           01103         movwf   PORTB
                      01104 
0000F8 0E1E           01105         movlw   DIMMER_BITMAP_PORTC
0000FA 121B           01106         iorwf   portc_image,f
0000FC 501B           01107         movf    portc_image,w
0000FE 0A00           01108         xorlw   (DIMMER_BITMAP_PORTC & ~SINK_MAP_PORTC)
000100 6E82           01109         movwf   PORTC
                      01110 
000102                01111 isr_status_LEDs:        
                      01112 
                      01113 ;;
                      01114 ;; Basically divide by 16...
                      01115 ;;
000102 A626           01116         btfss   isr_counter,3   ; skip LED work if count >=3 (modulo 16)
000104 B426           01117         btfsc   isr_counter,2
000106 EF?? F???      01118         goto    isr_exit
                      01119 
                      01120 ;; Go through this path once every 16 times around...translates to an LED
                      01121 ;; refresh rate of 200 or 240 Hz.
                      01122 
00010A                01123 isr_extra_work: 
                      01124 
00010A B226           01125         btfsc   isr_counter,1
00010C EF?? F???      01126         goto    isr_extra_work2
                      01127         
000110 B026           01128         btfsc   isr_counter,0
000112 EF?? F???      01129         goto    isr_extra_work1
                      01130 
                      01131 ;;
                      01132 ;; Turn all of the LEDs OFF before working on the PORTS to prevent ghosting
                      01133 ;;
                      01134 
                      01135 ;;      bsf     LED0_TRIS
                      01136 ;;      bsf     LED1_TRIS
000116 8A94           01137         bsf     LED2_TRIS
                      01138 
                      01139         
                      01140 ;;
                      01141 ;; Set one bit in the portx_image register that will apply positive voltage to
                      01142 ;; one of the LED anodes, and make sure that the other bits are low (for the
                      01143 ;; cathodes).
                      01144 ;;
                      01145 
                      01146 ;;      bcf     LED0_anode_sel
000118 BE20           01147         btfsc   LED_anode_rotator,7
                      01148 ;;      bsf     LED0_anode_sel
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01149 
                      01150 ;;      bcf     LED1_anode_sel
00011A BC20           01151         btfsc   LED_anode_rotator,6
                      01152 ;;      bsf     LED1_anode_sel
                      01153 
                      01154 
00011C EF?? F???      01155         goto    isr_exit        ; 20 clocks from , including this instruction
                      01156         
000120                01157 isr_extra_work1:
                      01158 ;;
                      01159 ;; now turn on selected LED bits in the portx_image registers
                      01160 ;;
000120 9A1B           01161         bcf     LED2_anode_sel
000122 BA20           01162         btfsc   LED_anode_rotator,5
000124 8A1B           01163         bsf     LED2_anode_sel
                      01164 
000126 5020           01165         movf    LED_anode_rotator,w
000128 1021           01166         iorwf   LED_cathode_rotator,w
                      01167 
00012A AE22           01168         btfss   LED_data_rotator,7 ; clear the TRIS mask if the LED is OFF
00012C 0E00           01169         movlw   0x00
                      01170 
00012E 6E25           01171         movwf   LED_TRIS_mask
                      01172                 
000130 EF?? F???      01173         goto    isr_exit        ; 18 clocks, including this instruction
                      01174         
000134                01175 isr_extra_work2:
000134 B026           01176         btfsc   isr_counter,0
000136 EF?? F???      01177         goto    isr_extra_work3
                      01178 
                      01179 ;;
                      01180 ;; Now write to the TRIS registers (setting two bits, one for an anode and
                      01181 ;;   one for a cathode).
                      01182 ;;
                      01183 
                      01184         
00013A BE25           01185         btfsc   LED_TRIS_mask,7
                      01186 ;;      bcf     LED0_TRIS
                      01187 
00013C BC25           01188         btfsc   LED_TRIS_mask,6
                      01189 ;;      bcf     LED1_TRIS
                      01190 
00013E BA25           01191         btfsc   LED_TRIS_mask,5
000140 9A94           01192         bcf     LED2_TRIS
                      01193 
                      01194 
                      01195         
                      01196 ;; start updating registers for next time around
                      01197         
000142 3420           01198         rlcf    LED_anode_rotator,w
000144 3620           01199         rlcf    LED_anode_rotator,f
                      01200 
000146 EF?? F???      01201         goto    isr_exit        ; 17 instructions, including this one.
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01202 
00014A                01203 isr_extra_work3:        
                      01204 ;;
                      01205 ;; Now update registers for next time.
                      01206 ;;
00014A 3421           01207         rlcf    LED_cathode_rotator,w
00014C 3621           01208         rlcf    LED_cathode_rotator,f
                      01209 
00014E 3622           01210         rlcf    LED_data_rotator,f
                      01211         
000150 2E1F           01212         decfsz  LED_bit_ctr,f
000152 EF?? F???      01213         goto    isr_exit
                      01214 
000156 861F           01215         bsf     LED_bit_ctr,3
                      01216         
000158 501E           01217         movf    LED_map,w
00015A 6E22           01218         movwf   LED_data_rotator; 13 instructions, including this one.
                      01219 
00015C                01220 isr_exit:
                      01221 
                      01222 
00015C 0011           01223         retfie  FAST
                      01224 
                      01225         
                      01226 ;;
                      01227 ;; End of Interrupt Routine, start of Foreground code.
                      01228 ;;
                      01229 
00015E                01230 initialize:
                      01231 ;;
                      01232 ;; initialize some registers
                      01233 ;;
00015E 6A40           01234         clrf    slot_id_ckt1    ; set all 'lamps' to lowest intensity
000160 6A41           01235         clrf    slot_id_ckt2
000162 6A42           01236         clrf    slot_id_ckt3
000164 6A43           01237         clrf    slot_id_ckt4
000166 6A44           01238         clrf    slot_id_ckt5
000168 6A45           01239         clrf    slot_id_ckt6
00016A 6A46           01240         clrf    slot_id_ckt7
00016C 6A47           01241         clrf    slot_id_ckt8
00016E 6A48           01242         clrf    slot_id_ckt9
000170 6A49           01243         clrf    slot_id_ckt10
000172 6A4A           01244         clrf    slot_id_ckt11
000174 6A4B           01245         clrf    slot_id_ckt12
000176 6A4C           01246         clrf    slot_id_ckt13
000178 6A4D           01247         clrf    slot_id_ckt14
00017A 6A4E           01248         clrf    slot_id_ckt15
00017C 6A4F           01249         clrf    slot_id_ckt16
                      01250 
                      01251 
                      01252         
00017E 6AE9           01253         clrf    FSR0L           ; start out discarding data
000180 6A04           01254         clrf    zc_noedge_counter
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01255 
000182 6AEA           01256         clrf    FSR0H
                      01257 
000184 6A1C           01258         clrf    ctr_timeslot
000186 6A26           01259         clrf    isr_counter
000188 6A19           01260         clrf    porta_image
00018A 6A1A           01261         clrf    portb_image
00018C 6A1B           01262         clrf    portc_image
                      01263 
00018E 0EFF           01264         movlw   0xFF
000190 6E17           01265         movwf   event_flag      ; no events pending
                      01266 
                      01267 #IFDEF DMX
                      01268 ;-------------------------Timeout addition
                      01269     movlw   0x83
                      01270     movwf   Timecounter
                      01271     movlw   0xFF
                      01272     movwf   Timeout
                      01273 ;-----------------------------
                      01274 
                      01275 #ENDIF
                      01276 
                      01277                 
                      01278 ;; initialize the ports - all outputs 'OFF".
                      01279         
000192 010F           01280         BANKSEL PORTA
000194 0E1F           01281         movlw   DIMMER_BITMAP_PORTA & SINK_MAP_PORTA
000196 6E80           01282         movwf   PORTA
000198 0EFD           01283         movlw   DIMMER_BITMAP_PORTB & SINK_MAP_PORTB
00019A 6E81           01284         movwf   PORTB
00019C 0E1E           01285         movlw   DIMMER_BITMAP_PORTC & SINK_MAP_PORTC
00019E 6E82           01286         movwf   PORTC
                      01287 
                      01288 
                      01289 ;; Set up the main oscillator, slightly different between the PIC18F and PIC16F
                      01290 ;;   families.
                      01291 ;;  {PR}        
                      01292 
                      01293 
                      01294  
0001A0 0E70           01295         movlw   OSC_CONTROL_LOCAL
0001A2 6ED3           01296         movwf   OSCCON
0001A4 0E40           01297         movlw   OSC_TUNE_LOCAL
0001A6 6E9B           01298         movwf   OSCTUNE
                      01299 
                      01300 
                      01301 ;; Turn off the analog stuff so that the I/O pins can be used for digital
                      01302 ;;   purposes.  The exact method of doing this will vary from part to part.
                      01303 ;; {PR}
                      01304 
                      01305 
                      01306   #IFDEF __18F25K22
                      01307 ;;      BANKSEL ANSELA   ; all A/D pins are digital
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01308         clrf    ANSELA
                      01309         clrf    ANSELB
                      01310     clrf        ANSELC
                      01311 
                      01312     CLRF LATA ; Alternate method to clear output data latches
                      01313     CLRF LATB
                      01314     CLRF LATC
                      01315    
                      01316     CLRF ANSELA ; Configure analog pins or digital only
                      01317         CLRF ANSELB
                      01318     CLRF ANSELC
                      01319 
                      01320   #ENDIF
                      01321 
                      01322   #IFNDEF __18F25K22
0001A8 0E0F           01323         movlw   (1<<PCFG3) | (1<<PCFG2) | (1<<PCFG1) | (1<<PCFG0)
0001AA 6EC1           01324         movwf   ADCON1          ; all A/D pins are digital
                      01325   #ENDIF
                      01326 
                      01327 
                      01328 
                      01329 
                      01330 ;; Start out with just the triac control bits programmed for output.  The TxD
                      01331 ;;   pin will become an output when the UART is configured, independent of the
                      01332 ;;   TRIS registers.  All other pins start out as inputs.  The status LED pins
                      01333 ;;   are re-configured from the ISR in accordance with the charlie-plexing
                      01334 ;;   scheme adopted here.
                      01335         
0001AC 010F           01336         BANKSEL TRISA
0001AE 0EE0           01337         movlw   255 & ~(DIMMER_BITMAP_PORTA)
0001B0 6E92           01338         movwf   TRISA^BANK1     ; triac control bits are output
0001B2 0E02           01339         movlw   255 & ~(DIMMER_BITMAP_PORTB)
0001B4 6E93           01340         movwf   TRISB^BANK1     ; triac control bits are output
0001B6 0EE1           01341         movlw   255 & ~(DIMMER_BITMAP_PORTC)
0001B8 6E94           01342         movwf   TRISC^BANK1     ; triac control bits are output
                      01343 
                      01344 
                      01345 
                      01346 
                      01347 
0001BA 9ED0           01348         bcf     RCON,IPEN
0001BC 6A9D           01349         clrf    PIE1
0001BE 6AA0           01350         clrf    PIE2
                      01351 
                      01352 ;; Read our address from the EEPROM at the end of this file
                      01353 #ifdef DMX
                      01354   #ifdef HARD_CODE_DMX_ADDR
                      01355                 movlw high DMX_START_ADDRESS
                      01356                 movwf dmxhighbyte
                      01357                 movlw low DMX_START_ADDRESS
                      01358                 movwf dmxlowbyte
                      01359   #else
                      01360                 movlw   LOW(EE_DMX_HIGH)
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01361                 movwf   EEADR
                      01362                 bcf             EECON1, EEPGD   ; point to adata memory
                      01363                 bcf             EECON1, CFGS    ; Access EEPROM
                      01364                 bsf             EECON1, RD              ; EE read
                      01365                 movff   EEDATA, dmxhighbyte     
                      01366 
                      01367                 movlw   LOW(EE_DMX_LOW)
                      01368                 movwf   EEADR
                      01369                 bcf             EECON1, EEPGD   ; point to adata memory
                      01370                 bcf             EECON1, CFGS    ; Access EEPROM
                      01371                 bsf             EECON1, RD              ; EE read
                      01372                 movff   EEDATA, dmxlowbyte
                      01373   #endif
                      01374         chgDmxState smDmxIdle
                      01375 #else
                      01376   #IFDEF START_ADDRESS
                      01377         movlw   0x00
                      01378         movwf   EEADR
                      01379 ;;      movwf   EEADRH  ;;may need to be commented out depending on PIC device
                      01380         movwf   EECON1
                      01381 
                      01382         bsf             EECON1,RD
                      01383         movf    EEDATA,w
                      01384 
                      01385         movwf   our_addr
                      01386 
                      01387         movlw   0x01  ; convert 1-based value from EEPROM into
                      01388         subwf   our_addr,f  ; 0-based value used in rx routine.
                      01389   #ENDIF
                      01390 #endif  
                      01391 ;; configure the UART - same for PIC16F and PIC18F parts.
                      01392 
0001C0 0E89           01393         movlw   BAUD_INIT;
0001C2 010F           01394         BANKSEL SPBRG
0001C4 6EAF           01395         movwf   SPBRG ^ BANK1
                      01396 
0001C6 6AB0           01397     clrf        SPBRGH
0001C8 0E08           01398         movlw   1<<BRG16   
0001CA 6EB8           01399         movwf   BAUDCTL
                      01400 
                      01401 
0001CC 010F           01402         BANKSEL TXSTA
                      01403         
0001CE 0E24           01404         movlw   (1<<TXEN) | (1<<BRGH); ; enable 8-bit transmitter in async mode
                      01405                                 ; (x16 baud divisor)
0001D0 6EAC           01406         movwf   TXSTA ^ BANK1
                      01407 
0001D2 010F           01408         BANKSEL RCSTA   
0001D4 0E90           01409         movlw   (1<<SPEN) | (1<<CREN); ; enable serial port with continuous 8-bit rx
0001D6 6EAB           01410         movwf   RCSTA
                      01411         
                      01412 ;; Set up timer2 for generating periodic interrupts.
                      01413 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001D8 0E9C           01414         movlw   CELL_TMR_INIT
0001DA 010F           01415         BANKSEL PR2
0001DC 6ECB           01416         movwf   PR2 ^ BANK1
                      01417         
0001DE 0E04           01418         movlw   (1 << TMR2ON)
                      01419 
0001E0 010F           01420         BANKSEL T2CON
0001E2 6ECA           01421         movwf   T2CON
                      01422 
0001E4 010F           01423         BANKSEL PIE1
0001E6 829D           01424         bsf     PIE1 ^ BANK1,TMR2IE
                      01425 
0001E8 010F           01426         BANKSEL PIR1
0001EA 929E           01427         bcf     PIR1,TMR2IF
                      01428         
                      01429 ;; Set up timer0 for timing how long the zero-crossing signal is OFF.
                      01430 
                      01431 
0001EC 0EC7           01432         movlw   1<<TMR0ON | 1<<T08BIT | 1<<T0PS0 | 1<<T0PS1 | 1<<T0PS2
0001EE 6ED5           01433         movwf   T0CON
                      01434 
                      01435 
0001F0 010F           01436         BANKSEL PORTA
                      01437 
0001F2 6AF2           01438         clrf    INTCON
                      01439 
0001F4 6A18           01440         clrf    state_flag
0001F6 B684           01441         btfsc   ZC
0001F8 8018           01442         bsf     state_flag,0    ; bit 0 indicates zc is on at the very start
0001FA B018           01443         btfsc   state_flag,0
0001FC 8A1E           01444         bsf     ZC_LED
                      01445         
0001FE 0E08           01446         movlw   8
000200 6E1F           01447         movwf   LED_bit_ctr
                      01448         
000202 0E88           01449         movlw   0x88
000204 6E20           01450         movwf   LED_anode_rotator
                      01451 
000206 0E52           01452         movlw   0x52
000208 6E21           01453         movwf   LED_cathode_rotator
                      01454 
00020A 6A22           01455         clrf    LED_data_rotator; all status LEDs initially off.
00020C 6A1E           01456         clrf    LED_map         ;
                      01457         
00020E 0EC0           01458         movlw   (1 <<GIE) | (1<<PEIE)
000210 6EF2           01459         movwf   INTCON          ; enable interrupts
                      01460 
000212 6A06           01461         clrf    zc_delayline
                      01462 
                      01463 ;; Longest serial RX pathlengths through this code (no events processed)
                      01464 ;; 21 instructions - discard state
                      01465 ;; 27 instructions - pure discard state
                      01466 ;; 19 instructions - Sync char (0x7E)
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01467 ;; 41 instructions - command byte (just after the Sync char).
                      01468 ;; 41 instructions - data byte (not ESC)
                      01469 ;;
                      01470 ;; normal Rx char (data copied to memory)
000214                01471 mainloop:
000214 3C17           01472         incfsz  event_flag,w    ; check event flags from ISR
000216 EC?? F???      01473         call    event_processor
                      01474         
                      01475 #ifdef DMX
                      01476 
                      01477 dmxEngine
                      01478  BANKSEL RCSTA
                      01479   btfsc RCSTA,OERR  ; BANK 3 - test for overrun error (rare)
                      01480   goto dmxError
                      01481 
                      01482  BANKSEL PIR1
                      01483   btfss PIR1,RCIF  ; Received a character yet?
                      01484   goto mainloop  ; Nope - jump back
                      01485   gotoDmxState
                      01486 
                      01487 
                      01488 dmxError
                      01489                 bcf             RCSTA,CREN      ; Overrun error
                      01490                 movf    RCREG,w         ; Flush the FIFO
                      01491 
                      01492                 movf    RCREG,w         ; Flush the FIFO
                      01493 
                      01494                 bsf             RCSTA,CREN
                      01495 
                      01496 
                      01497                 ; Fall through
                      01498 smDmxIdle
                      01499         movf    dmxhighbyte,w           ; Skipcounter is used to detmine how many
                      01500         movwf   skiphigh                ; received data bytes are skipped before the RGB
                      01501         movf    dmxlowbyte,w            ; data is collected.  Load skipcounter with
                      01502         movwf   skiplow                 ; the DMX address from above...
                      01503         movf    skiplow,f               ; ... then decrement it by one
                      01504         btfsc   STATUS,Z                ; so we know how many channels to ignore before the
                      01505         decf    skiphigh,f              ; useful data arrives.  We'll see more of the
                      01506         decf    skiplow,f               ; skipcounter a bit farther down the page.
                      01507                 chgDmxState smWait4break
                      01508 
                      01509 
                      01510                 ; Fall through.. an optimization cheat
                      01511 
                      01512 smWait4break
                      01513 
                      01514         BANKSEL RCSTA
                      01515         btfss   RCSTA,FERR               ; Here we're waiting to see if a break occurs
                      01516 
                      01517                 goto    purgeSerial
                      01518 
                      01519 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01520 
                      01521 
                      01522 
                      01523                 ; Code to implement 1HZ blinking when DMX is detected
                      01524 
                      01525                 decfsz  dmxStatusCtr,f
                      01526 
                      01527                 goto    endBlink
                      01528 
                      01529 
                      01530 
                      01531                 movlw   DMX_BLINK_RATE                  ; Blink every 44 frames = 1Hz
                      01532 
                      01533                 movwf   dmxStatusCtr
                      01534 
                      01535                 movf    RXD_LED_REG,W
                      01536 
                      01537                 xorlw   1<<RXD_LED_BIT
                      01538 
                      01539                 movwf   RXD_LED_REG
                      01540 
                      01541 endBlink
                      01542 
                      01543                 chgDmxState smWait4Start
                      01544 purgeSerial
                      01545 
                      01546         BANKSEL RCREG
                      01547 
                      01548                 movf    RCREG,w                                 ; Purge the incoming Buffer
                      01549 
                      01550                 goto    mainloop
                      01551 
                      01552 
                      01553 smWait4Start
                      01554         BANKSEL RCSTA
                      01555         btfsc   RCSTA,FERR              ; a framing error.  If all is well AND the
                      01556         goto    purgeSerial                     ; new byte is zero (which means the start code
                      01557         movf    RCREG,w                 ; is also zero, it's okay to begin gethering channel
                      01558                                         ; data
                      01559 
                      01560         ; Define target of payload
                      01561 
                      01562 
                      01563 
                      01564                 btfss   STATUS,Z                                ; Check for a ZERO byte
                      01565 
                      01566                 goto    smDmxIdle                               ; Was not a ZERO - start looking again
                      01567 ;--------------------------------Timeout addition ---------------------
                      01568                 movlw   0xFF                    
                      01569                 movwf   Timeout
                      01570 ;----------------------------------------------------------------------
                      01571         BANKSEL FSR0L
                      01572                 movlw   slot_id_ckt1                    ; next state is normal body
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01573                 movwf   FSR0L                                   ; point to start of slot_id area
                      01574 
                      01575         ; Define PAYLOAD size
                      01576                 movlw   0x10                                    ; 32 bytes of payload
                      01577                 movwf   dmxPayloadCount
                      01578                 chgDmxState     smScanDmxData
                      01579 
                      01580         movf    skiphigh,W              ; Here check to see if the highbyte is
                      01581         btfss   STATUS,Z                ; zero. If it is,check to see if the
                      01582         goto    mainloop                    ; lowbyte is 1.  If 1, grab the next 32 bytes
                      01583         movf    skiplow,w               ; which come through.  If <> 1, go to the routine
                      01584         btfss   STATUS,Z                ; which receives and discards bytes until the
                      01585         goto    mainloop                ; DMX address has been reached.
                      01586         chgDmxState smReadDmxPayload
                      01587                 goto    mainloop
                      01588 
                      01589 smScanDmxData
                      01590 
                      01591         BANKSEL RCSTA
                      01592         btfss   RCSTA,FERR              ; Test for a framing error.
                      01593         goto    continueScan            ;
                      01594 
                      01595 
                      01596 
                      01597                 chgDmxState smWait4Start
                      01598 
                      01599                 goto    purgeSerial
                      01600 
                      01601 
                      01602 
                      01603 continueScan
                      01604 
                      01605         BANKSEL RCREG
                      01606         movf    RCREG,w                 ; Then, capture & move to 'w'...
                      01607 
                      01608         movf    skiplow,f               ; ...decrement the skip counter...
                      01609         btfsc   STATUS,Z                ; (all sixteen bits of it)
                      01610         decf    skiphigh,f
                      01611         decf    skiplow,f
                      01612                                         ; ...and see if we've reached the start address.
                      01613         movf    skiplow,W               ; If the skip counter now equals zero, we know
                      01614         btfss   STATUS,Z                ; that we need to gather the next five bytes
                      01615         goto    mainloop                    ; and save them as RGBAW data.  If the counter is
                      01616         movf    skiphigh,W              ; still nonzero, loop back and do it again.
                      01617         btfss   STATUS,Z
                      01618         goto    mainloop
                      01619                 chgDmxState smReadDmxPayload
                      01620                 goto    mainloop
                      01621 
                      01622 smReadDmxPayload
                      01623 
                      01624         BANKSEL RCSTA
                      01625         btfss   RCSTA,FERR              ; Test for a framing error.
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01626         goto    continuePayload         ;
                      01627 
                      01628 
                      01629                 chgDmxState smWait4Start
                      01630 
                      01631                 goto    purgeSerial
                      01632 
                      01633 
                      01634 
                      01635 continuePayload
                      01636 
                      01637         BANKSEL RCREG
                      01638         movf    RCREG,W
                      01639 
                      01640         BANKSEL INDF0
                      01641                 movwf   INDF0                                   ; Copy to the target
                      01642                 incf    FSR0L,f                         ; Increment the target
                      01643                 decf    dmxPayloadCount,F
                      01644                 btfss   STATUS,Z
                      01645                 goto    mainloop
                      01646 
                      01647 smDmxDone
                      01648 
                      01649                 chgDmxState smDmxIdle
                      01650 
                      01651                 goto    mainloop
                      01652 #else
                      01653 
00021A AA9E           01654         btfss   PIR1,RCIF       ; skip if UART has a rx character to process
00021C EF?? F???      01655         goto    mainloop        ; no character available
                      01656 
000220 0E06           01657         movlw   6               ; Rx error mask (framing error, overrun error)
000222 14AB           01658         andwf   RCSTA,w         ; get (masked) rx status
000224 A4D8           01659         btfss   STATUS,Z
000226 EF?? F???      01660         goto    rx_error        ; goto error routine
                      01661 
00022A 50AE           01662         movf    RCREG,w
00022C 6E05           01663         movwf   rx_char         ; and save a working copy
                      01664         
00022E 0F82           01665         addlw   0x82            ; test for sync character
000230 A4D8           01666         btfss   STATUS,Z        ; skip if sync character
000232 EF?? F???      01667         goto    rx_not_sync     ; jump to code for processing non-sync
                      01668 
                      01669 ;; 
                      01670 ;; process sync character
                      01671 ;;
000236 6AE9           01672         clrf    FSR0L           ; next byte is command byte, regardless of
000238 8EE9           01673         bsf             FSR0L,7         ; prior state
00023A                01674 rx_echo:        
00023A 5005           01675         movf    rx_char,w       ; echo most recent character to transmitter
00023C 6EAD           01676         movwf   TXREG
00023E EF?? F???      01677         goto    mainloop
                      01678 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000242                01679 rx_error:
000242 50AE           01680         movf    RCREG,w
                      01681         
000244 0E80           01682         movlw   0x80
                      01683 
000246 6E28           01684         movwf   frame_err_countdown
000248 821E           01685     bsf FRAME_ERR_LED
                      01686 
00024A 98AB           01687         bcf     RCSTA,CREN
00024C 88AB           01688         bsf     RCSTA,CREN
00024E 6AE9           01689         clrf    FSR0L           ; start discarding
000250 EF?? F???      01690         goto    mainloop
                      01691 
                      01692 ;; 
                      01693 ;; process non-sync character
                      01694 ;;
                      01695 
                      01696 ;; rx_state == FSR:
                      01697 ;; 00000000 -> discarding data (startup, just after rx error)
                      01698 ;; 1xxxxxxx -> expecting command/address byte (just after SYNC)
                      01699 ;; 010nnnnn -> process short-form data character
                      01700 ;; 011xxxxx -> echoing data (count was > 0 or after end of local data)
                      01701         
000254                01702 rx_not_sync:
000254 0F01           01703         addlw   1               ; test for PAD character - discard if yes
000256 B4D8           01704         btfsc   STATUS,Z
000258 EF?? F???      01705         goto    mainloop
                      01706 
00025C 52E9           01707         movf    FSR0L,f 
00025E B4D8           01708         btfsc   STATUS,Z        ; skip if not discard state
000260 EF?? F???      01709         goto    mainloop
000264 B8E9           01710         btfsc   FSR0L,4         ; skip if non-echo state,,RP32 6 RP24 5 RP16 4 TR8 3
000266 EF?? F???      01711         goto    rx_echo         ; pure echo
                      01712 ;;
                      01713 ;; handle non-echo, non-SYNC cases
                      01714 ;;
00026A AEE9           01715         btfss   FSR0L,7         ; skip if first character after SYNC
00026C EF?? F???      01716         goto    decode_packet_body
000270                01717 decode_cmd_byte:                ; first character after the SYNC
000270 9EE9           01718         bcf     FSR0L,7         ; no longer on 'first char after SYNC'
000272 8AE9           01719         bsf     FSR0L,5         ; just in case packet is not for us.
000274 AE05           01720         btfss   rx_char,7
000276 EF?? F???      01721         goto    rx_echo         ; long form packet, just echo it.
                      01722 
                      01723   #IFDEF START_ADDRESS
                      01724 
                      01725         movf    our_addr,w
                      01726         subwf   rx_char,f       ; incoming address - 'our_addr'
                      01727 
                      01728         btfsc   rx_char,7       ; bit 7 set after the subtract?  If so, data is
                      01729         goto    rx_echo         ; all for downstream controllers.
                      01730 
                      01731         movlw   0x81
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01732         addwf   rx_char,w
                      01733         movwf   rx_discard_count; PJS 4/22/11
                      01734         
                      01735         movlw   0x80
                      01736         movwf   rx_char
                      01737         movlw   slot_id_ckt1    ; next state is normal body
                      01738         movwf   FSR0L           ; point to start of slot_id area
                      01739         bcf     rx_flag_extra,7 ; most recent char wasn't ESC
                      01740         
                      01741 ;;      incf    rx_char,f       ; commented out be PJS 4/22/11
                      01742         clrf    rx_copycount    ; PJS 4/22/11
                      01743         
                      01744         goto    rx_echo         ; get next character (and echo the '0x80').
                      01745 
                      01746   #ELSE
                      01747 
00027A 0605           01748         decf    rx_char,f       ; 
00027C BE05           01749         btfsc   rx_char,7       ; value 0x7F after dec?  If so, it's for us
00027E EF?? F???      01750         goto    rx_echo
                      01751 
000282 0E40           01752         movlw   slot_id_ckt1    ; next state is normal body
000284 6EE9           01753         movwf   FSR0L           ; point to start of slot_id area
000286 9E30           01754         bcf     rx_flag_extra,7 ; most recent char wasn't ESC
                      01755         
000288 2A05           01756         incf    rx_char,f
                      01757 
00028A EF?? F???      01758         goto    rx_echo         ; get next character (and echo the '0x80').
                      01759 
                      01760   #ENDIF
                      01761 
                      01762 ;;
                      01763 ;; done initializing packet, now handle the data
                      01764 ;;
                      01765 ;; to get here, char was not SYNC, FSR.7 was clear, FSR.5 was clear, FSR NZ
                      01766 ;;
00028E                01767 decode_packet_body:
                      01768 
00028E AE30           01769         btfss   rx_flag_extra,7 ; skip if previous char was ESC
000290 EF?? F???      01770         goto    previous_not_ESC
000294 0E4E           01771         movlw   0x4E
000296 2605           01772         addwf   rx_char,f       ; decode the ESC charactor
000298 EF?? F???      01773         goto    after_ESC_decoding
00029C                01774 previous_not_ESC:       
00029C 8E30           01775         bsf     rx_flag_extra,7 ; just in case current char is ESC
00029E 0E7F           01776         movlw   0x7F
0002A0 1805           01777         xorwf   rx_char,w       ; check for ESC
0002A2 B4D8           01778         btfsc   STATUS,Z        ; skip if not ESC
0002A4 EF?? F???      01779         goto    mainloop        ; go and discard the ESC
0002A8                01780 after_ESC_decoding:
0002A8 9E30           01781         bcf     rx_flag_extra,7 ; normal data state
                      01782 
                      01783   #IFDEF START_ADDRESS
                      01784 
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01785         movf    rx_discard_count,f ; PJS 4/22/11  
                      01786         btfss   STATUS,Z        ; PJS 4/22/11
                      01787         goto    rx_upfront_discard ; PJS 4/22/11
                      01788         
                      01789         movlw   0x80            ; reset countdown flag to max value.
                      01790 
                      01791         movwf   rxd_countdown
                      01792     bsf RXD_LED
                      01793 
                      01794 
                      01795         movf    rx_char,w       ; copy data to memory..
                      01796         movwf   INDF0
                      01797         incf    FSR0L,f
                      01798 
                      01799         goto    mainloop        ; no echo !
                      01800 
                      01801 ; PJS 4/22/11 :         
                      01802 ;; logic for discarding/ignoring bytes until the place indicated by the
                      01803 ;; start address is reached.
                      01804         
                      01805 rx_upfront_discard:             ; PJS 4/22/11
                      01806         incf    rx_copycount,f  ; PJS 4/22/11
                      01807         btfsc   rx_copycount,3  ; PJS 4/22/11
                      01808         incf    rx_discard_count,f      ; PJS 4/22/11
                      01809         bcf     rx_copycount,3  ; PJS 4/22/11
                      01810 
                      01811         goto    mainloop        ; PJS 4/22/11
                      01812 
                      01813   #ELSE
                      01814 
0002AA 0E80           01815         movlw   0x80            ; reset countdown flag to max value.
0002AC 6E29           01816         movwf   rxd_countdown
0002AE 861E           01817     bsf RXD_LED
                      01818 
                      01819 
0002B0 5005           01820         movf    rx_char,w       ; copy data to memory..
0002B2 6EEF           01821         movwf   INDF0
0002B4 2AE9           01822         incf    FSR0L,f
                      01823 
0002B6 EF?? F???      01824         goto    mainloop        ; no echo ! 
                      01825 
                      01826   #ENDIF        
                      01827 ;;
                      01828 #endif ;; RENARD protocol       
                      01829 ;; do all work associated with zero-crossing (ac line frequency detection)
                      01830 ;;
                      01831 ;; event_flag bit assignments
                      01832 ;; bit 0 - clear if interrupt counter incremented through 0
                      01833 ;; bit 1 - clear if rising edge on ZC was detected.
                      01834 
0002BA                01835 event_processor:
                      01836 
0002BA B017           01837         btfsc   event_flag,0    ; bit 0 is clear if 256 interrupts have occured
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002BC EF?? F???      01838         goto    end_timer_events
                      01839 
                      01840 #IFDEF DMX
                      01841 ;-----------------------Timeout addition ----------------------------
                      01842 #DEFINE Lights_out
                      01843 
                      01844 #ifdef Lights_out
                      01845 
                      01846     decf    Timecounter,F
                      01847     btfsc   STATUS,Z
                      01848     goto    NormalCode
                      01849     movlw   0x83
                      01850     movwf   Timecounter
                      01851 
                      01852     decf    Timeout,F
                      01853     btfsc   STATUS,Z
                      01854     goto    clearData
                      01855     goto    NormalCode
                      01856 clearData:
                      01857     movlw   0xFF
                      01858     movwf   Timeout
                      01859 ;       We need to clear out all the data values
                      01860         BANKSEL slot_id_ckt1
                      01861         clrf    slot_id_ckt1    ; set all 'lamps' to lowest intensity
                      01862         clrf    slot_id_ckt2
                      01863         clrf    slot_id_ckt3
                      01864         clrf    slot_id_ckt4
                      01865         clrf    slot_id_ckt5
                      01866         clrf    slot_id_ckt6
                      01867         clrf    slot_id_ckt7
                      01868         clrf    slot_id_ckt8
                      01869         clrf    slot_id_ckt9
                      01870         clrf    slot_id_ckt10
                      01871         clrf    slot_id_ckt11
                      01872         clrf    slot_id_ckt12
                      01873         clrf    slot_id_ckt13
                      01874         clrf    slot_id_ckt14
                      01875         clrf    slot_id_ckt15
                      01876         clrf    slot_id_ckt16
                      01877 
                      01878 
                      01879 #endif
                      01880 
                      01881 ;---------------------------------------------------------------
                      01882 NormalCode:
                      01883 
                      01884 #ENDIF
                      01885 
                      01886 ;; 256 timer interrupts have occurred
                      01887 
0002C0 8017           01888         bsf     event_flag,0
                      01889 
                      01890 ; count down to determine when to toggle the heartbeat LED
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01891 
                      01892 
0002C2 0E01           01893     movlw   1<<HEARTBEAT_LED_BIT ; update heartbeat
0002C4 0627           01894         decf    heartbeat_countdown,f
0002C6 B4D8           01895         btfsc   STATUS,Z
0002C8 1A1E           01896         xorwf   HEARTBEAT_LED_REG,f
                      01897 
                      01898 
                      01899         
                      01900 ; count down to determine when to turn off the RxD LED.
                      01901 
                      01902 
                      01903 
                      01904 ;;      decf    rxd_countdown,f
                      01905 ;;      btfsc   STATUS,Z
                      01906 ;;    xorwf   HEARTBEAT_LED_REG,f
                      01907         
                      01908 ; count down to determine when to turn off the Framing Error LED
                      01909         
                      01910 ;;      decf    rxd_countdown,f
                      01911 ;;      btfsc   STATUS,Z
                      01912 ;;    bcf RXD_LED
                      01913 
                      01914 ; count down to determine when to turn off the Framing Error LED
                      01915         
0002CA 0628           01916         decf    frame_err_countdown,f
0002CC B4D8           01917         btfsc   STATUS,Z
0002CE 921E           01918         bcf     FRAME_ERR_LED
                      01919 
                      01920 
                      01921 
                      01922 
                      01923 ; count down to detect missing ZC edges
                      01924 
0002D0 2E04           01925         decfsz  zc_noedge_counter,f
0002D2 EF?? F???      01926         goto    end_timer_events
                      01927 
0002D6 9A1E           01928         bcf     ZC_LED          ; approximately 16 missing ZC pulses, so set ZC
0002D8 B684           01929         btfsc   ZC              ; LED to reflect the current state of the ZC.
0002DA 8A1E           01930         bsf     ZC_LED
                      01931 
0002DC 8804           01932         bsf     zc_noedge_counter,4
                      01933 
0002DE                01934 end_timer_events:
0002DE B217           01935         btfsc   event_flag,1    ; ZC rising edge detected?
0002E0 0012           01936         return          ;
                      01937 
                      01938 ;;
                      01939 ;; The following code is only executed on the rising edge of ZC.  It is never
                      01940 ;;   executed if ZC is permanently high or low (i.e. DC application).
                      01941 ;;
0002E2 8217           01942         bsf     event_flag,1
                      01943         
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002E4 0E20           01944         movlw   1<<ZC_LED_BIT   ; select zero-crossing bit.
                      01945 
0002E6 062A           01946         decf    zc_countdown,f  ; flip the zc LED once every 256 times.
                      01947 
0002E8 B4D8           01948         btfsc   STATUS,Z
0002EA 1A1E           01949         xorwf   ZC_LED_REG,f    ; toggle the zc LED if countdown expired
                      01950 
0002EC 0E10           01951         movlw   16              ; reset the counter looking for missing edges
0002EE 6E04           01952         movwf   zc_noedge_counter
                      01953         
                      01954 ; update the periodic interrupt limit (to adjust for differing AC frequencies).
                      01955 
0002F0 501D           01956         movf    zc_tmr_save,w
0002F2 08DF           01957         sublw   MIN_ZC_TIMER    ; MIN_ZC_TIMER - zc_tmr_save 
                      01958 
0002F4 B0D8           01959         btfsc   STATUS,C        ; CY set means no borrow, so zc_tmr_save is
0002F6 0012           01960         return                  ; too small ... so return without updating PR2
                      01961 
0002F8 041D           01962         decf    zc_tmr_save,w   ; update PR2 (and clear TMR2 if past PR2)
                      01963         
0002FA 9EF2           01964         bcf     INTCON,GIE
                      01965 
0002FC 010F           01966         BANKSEL PR2
0002FE 6ECB           01967         movwf   PR2 ^ BANK1     ; save new PR2 value
000300 010F           01968         BANKSEL TMR2
000302 5CCC           01969         subwf   TMR2,w          ; TMR2 - PR2 
000304 B0D8           01970         btfsc   STATUS,C        ; CY set means no borrow -> TMR2 >= PR2
000306 6ACC           01971         clrf    TMR2            ; reset TMR2 because it's over the limit
                      01972         
000308 8EF2           01973         bsf     INTCON,GIE
00030A                01974 zc_filter_restart_timer:
00030A 0012           01975         return
                      01976 
                      01977   #IFDEF START_ADDRESS
                      01978 
                      01979         ORG 0xF00000
                      01980         de 2+START_ADDR
                      01981 
                      01982   #ENDIF
                      01983 
                      01984   #IFDEF DMX_START_ADDRESS
                      01985 
                      01986         ORG 0xF00000
                      01987         de HIGH(DMX_START_ADDRESS),LOW(DMX_START_ADDRESS)
                      01988         de 0xDE,0xAD,0xC0,0xDE
                      01989 
                      01990   #ENDIF
                      01991 
                      01992   
                      01993   
                      01994 
                      01995         END
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN4                               00000005
AN8                               00000002
AN9                               00000003
BANK1                             0
BANK2_TWIDDLE                     0
BANK3_TWIDDLE                     0
BANK4_TWIDDLE                     0
BANKED                            00000001
BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BAUDRATE                          57600
BAUD_INIT                         (CLOCKRATE/BAUDRATE/4 - 1)
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 40


SYMBOL TABLE
  LABEL                             VALUE 

C2INV                             00000005
C2OUT                             00000007
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCPR1                             00000FBE
CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CELL_RATE                         ((2*DEFAULT_LINERATE) * 256)
CELL_TMR_INIT                     (CLOCKRATE/8/CELL_RATE)
CFGS                              00000006
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLOCKRATE                         32000000
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CREN                              00000004
CSRC                              00000007
CTR_LOCKOUT                       0
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 41


SYMBOL TABLE
  LABEL                             VALUE 

CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
DDRE                              TRISE
DEFAULT_LINERATE                  50
DIMMER_BITMAP_PORTA               (PIN2_DIMMER | PIN3_DIMMER | PIN4_DIMMER | PIN5_DIMMER | PIN6_DIMMER | PIN7_DIMMER | PIN10_DIMMER 
                            | PIN9_DIMMER)
DIMMER_BITMAP_PORTB               (PIN21_DIMMER | PIN22_DIMMER | PIN23_DIMMER | PIN24_DIMMER | PIN25_DIMMER | PIN26_DIMMER | PIN27_D
                            IMMER | PIN28_DIMMER)
DIMMER_BITMAP_PORTC               (PIN11_DIMMER | PIN12_DIMMER | PIN13_DIMMER | PIN14_DIMMER | PIN15_DIMMER | PIN16_DIMMER | PIN17_D
                            IMMER | PIN18_DIMMER)
DMX_BLINK_RATE                    0x2C
DONE                              00000001
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
ECCP1DEL                          00000FB7
ECCPAS                            00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EEADRH                            00000FAA
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
FAST                              00000001
FERR                              00000002
FLTS                              00000002
FRAME_ERR_LED                     FRAME_ERR_LED_REG, FRAME_ERR_LED_BIT
FRAME_ERR_LED_BIT                 1
FRAME_ERR_LED_REG                 LED_map
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 42


SYMBOL TABLE
  LABEL                             VALUE 

FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HEARTBEAT_LED                     HEARTBEAT_LED_REG, HEARTBEAT_LED_BIT
HEARTBEAT_LED_BIT                 0
HEARTBEAT_LED_REG                 LED_map
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 43


SYMBOL TABLE
  LABEL                             VALUE 

INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IVRST                             00000005
Int                               00000008
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LED2_TRIS                         TRISC^BANK1,5
LED2_anode_sel                    portc_image,5
LED_TRIS_mask                     00000025
LED_anode_rotator                 00000020
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 44


SYMBOL TABLE
  LABEL                             VALUE 

LED_bit_ctr                       0000001F
LED_cathode_rotator               00000021
LED_data_rotator                  00000022
LED_map                           0000001E
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MAX_LINERATE                      70
MCLR                              00000003
MIN_ZC_TIMER                      ((CLOCKRATE/4)/MAX_LINERATE/256/2)
N                                 00000004
NO                                0
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_MCLR                          00000003
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSC_CONFIG_LOCAL                  OSC=INTIO67
OSC_CONTROL_LOCAL                 0x70
OSC_TUNE_LOCAL                    1<<PLLEN
OSTS                              00000003
OV                                00000003
P                                 00000004
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 45


SYMBOL TABLE
  LABEL                             VALUE 

PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIC18_FAMILY                      
PIE1                              00000F9D
PIE2                              00000FA0
PIN10_DIMMER                      0
PIN10_PWM                         YES
PIN10_SINK                        NO
PIN11_DIMMER                      0
PIN11_PWM                         YES
PIN11_SINK                        NO
PIN12_CH                          6
PIN12_DIMMER                      (1<<1)
PIN12_PWM                         YES
PIN12_SINK                        YES
PIN13_CH                          7
PIN13_DIMMER                      (1<<2)
PIN13_PWM                         YES
PIN13_SINK                        YES
PIN14_CH                          8
PIN14_DIMMER                      (1<<3)
PIN14_PWM                         YES
PIN14_SINK                        YES
PIN15_CH                          16
PIN15_DIMMER                      (1<<4)
PIN15_PWM                         YES
PIN15_SINK                        YES
PIN16_DIMMER                      0
PIN16_PWM                         YES
PIN16_SINK                        NO
PIN17_DIMMER                      0
PIN17_SINK                        NO
PIN18_DIMMER                      0
PIN18_SINK                        NO
PIN21_CH                          15
PIN21_DIMMER                      (1<<0)
PIN21_PWM                         YES
PIN21_SINK                        YES
PIN22_DIMMER                      0
PIN22_PWM                         YES
PIN22_SINK                        NO
PIN23_CH                          14
PIN23_DIMMER                      (1<<2)
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

PIN23_PWM                         YES
PIN23_SINK                        YES
PIN24_CH                          13
PIN24_DIMMER                      (1<<3)
PIN24_PWM                         YES
PIN24_SINK                        YES
PIN25_CH                          12
PIN25_DIMMER                      (1<<4)
PIN25_PWM                         YES
PIN25_SINK                        YES
PIN26_CH                          11
PIN26_DIMMER                      (1<<5)
PIN26_PWM                         YES
PIN26_SINK                        YES
PIN27_CH                          10
PIN27_DIMMER                      (1<<6)
PIN27_PWM                         YES
PIN27_SINK                        YES
PIN28_CH                          9
PIN28_DIMMER                      (1<<7)
PIN28_PWM                         YES
PIN28_SINK                        YES
PIN2_CH                           1
PIN2_DIMMER                       (1<<0)
PIN2_PWM                          YES
PIN2_SINK                         YES
PIN3_CH                           2
PIN3_DIMMER                       (1<<1)
PIN3_PWM                          YES
PIN3_SINK                         YES
PIN4_CH                           3
PIN4_DIMMER                       (1<<2)
PIN4_PWM                          YES
PIN4_SINK                         YES
PIN5_CH                           4
PIN5_DIMMER                       (1<<3)
PIN5_PWM                          YES
PIN5_SINK                         YES
PIN6_CH                           5
PIN6_DIMMER                       (1<<4)
PIN6_PWM                          YES
PIN6_SINK                         YES
PIN7_DIMMER                       0
PIN7_PWM                          YES
PIN7_SINK                         NO
PIN9_DIMMER                       0
PIN9_PWM                          YES
PIN9_SINK                         NO
PIR1                              00000F9E
PIR2                              00000FA1
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PWM1CON                           00000FB7
PWM_MAP_PORTA                     ((((((((PIN9_PWM*2+PIN10_PWM)*2+PIN7_PWM)*2+PIN6_PWM)*2+PIN5_PWM)*2+PIN4_PWM)*2+PIN3_PWM)*2+PIN2_P
                            WM))
PWM_MAP_PORTB                     ((((((((PIN28_PWM*2+PIN27_PWM)*2+PIN26_PWM)*2+PIN25_PWM)*2+PIN24_PWM)*2+PIN23_PWM)*2+PIN22_PWM)*2+
                            PIN21_PWM))
PWM_MAP_PORTC                     (((((((PIN16_PWM)*2+PIN15_PWM)*2+PIN14_PWM)*2+PIN13_PWM)*2+PIN12_PWM)*2+PIN11_PWM))
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RE3                               00000003
RI                                00000004
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXCKP                             00000005
RXDTP                             00000005
RXD_LED                           RXD_LED_REG, RXD_LED_BIT
RXD_LED_BIT                       3
RXD_LED_REG                       LED_map
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SEN                               00000000
SENDB                             00000003
SINK_MAP_PORTA                    (((((((PIN9_SINK * 2 + PIN10_SINK) * 2 + PIN7_SINK) * 2 + PIN6_SINK) * 2 + PIN5_SINK) * 2 + PIN4_S
                            INK) * 2 + PIN3_SINK) * 2 + PIN2_SINK)
SINK_MAP_PORTB                    (((((((PIN28_SINK * 2 + PIN27_SINK) * 2 + PIN26_SINK) * 2 + PIN25_SINK) * 2 + PIN24_SINK) * 2 + PI
                            N23_SINK) * 2 + PIN22_SINK) * 2 + PIN21_SINK)
SINK_MAP_PORTC                    (((((((PIN18_SINK * 2 + PIN17_SINK) * 2 + PIN16_SINK) * 2 + PIN15_SINK) * 2 + PIN14_SINK) * 2 + PI
                            N13_SINK) * 2 + PIN12_SINK) * 2 + PIN11_SINK)
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKPTR0                           00000000
STKPTR1                           00000001
STKPTR2                           00000002
STKPTR3                           00000003
STKPTR4                           00000004
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0SE                              00000004
T13CKI                            00000000
T1CKI                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
Timecounter                       0000002C
Timeout                           0000002B
UA                                00000001
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VPP                               00000003
W                                 00000000
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
YES                               1
Z                                 00000002
ZC                                ZC_REG,(ZC_BIT)
ZC_BIT                            3
ZC_LED                            ZC_LED_REG,ZC_LED_BIT
ZC_LED_BIT                        5
ZC_LED_REG                        LED_map
ZC_MASK                           (1<<(ZC_BIT))
ZC_REG                            PORTE
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
_CP2_OFF_5L                       000000FF
_CP2_ON_5L                        000000FB
_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTR2_OFF_7L                     000000FF
_EBTR2_ON_7L                      000000FB
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRT2_OFF_6L                      000000FF
_WRT2_ON_6L                       000000FB
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F2525                         00000001
__DEBUG                           1
_status                           00000024
_w                                00000023
after_ESC_decoding                000002A8
ctr_ckt1                          00000007
ctr_ckt10                         00000010
ctr_ckt11                         00000011
ctr_ckt12                         00000012
ctr_ckt13                         00000013
ctr_ckt14                         00000014
ctr_ckt15                         00000015
ctr_ckt16                         00000016
ctr_ckt2                          00000008
ctr_ckt3                          00000009
ctr_ckt4                          0000000A
ctr_ckt5                          0000000B
ctr_ckt6                          0000000C
ctr_ckt7                          0000000D
ctr_ckt8                          0000000E
ctr_ckt9                          0000000F
ctr_timeslot                      0000001C
decode_cmd_byte                   00000270
decode_packet_body                0000028E
dmxPayloadCount                   00000031
dmxStatusCtr                      00000034
dmxhighbyte                       0000002D
dmxlowbyte                        0000002E
end_timer_events                  000002DE
event_flag                        00000017
event_processor                   000002BA
frame_err_countdown               00000028
heartbeat_countdown               00000027
initialize                        0000015E
MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

isr_counter                       00000026
isr_exit                          0000015C
isr_extra_work                    0000010A
isr_extra_work1                   00000120
isr_extra_work2                   00000134
isr_extra_work3                   0000014A
isr_load_counters                 0000009C
isr_not_zc_lead_edge              00000026
isr_regular                       0000002E
isr_status_LEDs                   00000102
mainloop                          00000214
our_addr                          0000002D
porta_image                       00000019
portb_image                       0000001A
portc_image                       0000001B
previous_not_ESC                  0000029C
rx_char                           00000005
rx_copycount                      0000002F
rx_discard_count                  0000002E
rx_echo                           0000023A
rx_error                          00000242
rx_flag_extra                     00000030
rx_not_sync                       00000254
rxd_countdown                     00000029
skiphigh                          0000002F
skiplow                           00000030
slot_id_ckt1                      00000040
slot_id_ckt10                     00000049
slot_id_ckt11                     0000004A
slot_id_ckt12                     0000004B
slot_id_ckt13                     0000004C
slot_id_ckt14                     0000004D
slot_id_ckt15                     0000004E
slot_id_ckt16                     0000004F
slot_id_ckt2                      00000041
slot_id_ckt3                      00000042
slot_id_ckt4                      00000043
slot_id_ckt5                      00000044
slot_id_ckt6                      00000045
slot_id_ckt7                      00000046
slot_id_ckt8                      00000047
slot_id_ckt9                      00000048
smDmxH                            00000033
smDmxL                            00000032
state_flag                        00000018
zc_countdown                      0000002A
zc_delayline                      00000006
zc_filter_restart_timer           0000030A
zc_noedge_counter                 00000004
zc_tmr_save                       0000001D

MPASM  5.51                RPLCCDMXRENARD.ASM   9-2-2016  12:43:09         PAGE 56





Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

